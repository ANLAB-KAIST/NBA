// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctrl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include <nba/engines/knapp/ctrl.pb.h>

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace knapp {

namespace {

const ::google::protobuf::Descriptor* CtrlRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlRequest_PingParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlRequest_PingParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlRequest_MallocParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlRequest_MallocParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlRequest_CreateVdevParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlRequest_CreateVdevParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlRequest_VdevRefParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlRequest_VdevRefParam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CtrlRequest_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CtrlResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlResponse_TextResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlResponse_TextResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlResponse_ResourceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlResponse_ResourceResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CtrlResponse_Reply_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ctrl_2eproto() {
  protobuf_AddDesc_ctrl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ctrl.proto");
  GOOGLE_CHECK(file != NULL);
  CtrlRequest_descriptor_ = file->message_type(0);
  static const int CtrlRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest, ping_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest, malloc_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest, create_vdev_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest, vdev_ref_),
  };
  CtrlRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlRequest_descriptor_,
      CtrlRequest::default_instance_,
      CtrlRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CtrlRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest, _internal_metadata_),
      -1);
  CtrlRequest_PingParam_descriptor_ = CtrlRequest_descriptor_->nested_type(0);
  static const int CtrlRequest_PingParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_PingParam, msg_),
  };
  CtrlRequest_PingParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlRequest_PingParam_descriptor_,
      CtrlRequest_PingParam::default_instance_,
      CtrlRequest_PingParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_PingParam, _has_bits_[0]),
      -1,
      -1,
      sizeof(CtrlRequest_PingParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_PingParam, _internal_metadata_),
      -1);
  CtrlRequest_MallocParam_descriptor_ = CtrlRequest_descriptor_->nested_type(1);
  static const int CtrlRequest_MallocParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_MallocParam, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_MallocParam, align_),
  };
  CtrlRequest_MallocParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlRequest_MallocParam_descriptor_,
      CtrlRequest_MallocParam::default_instance_,
      CtrlRequest_MallocParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_MallocParam, _has_bits_[0]),
      -1,
      -1,
      sizeof(CtrlRequest_MallocParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_MallocParam, _internal_metadata_),
      -1);
  CtrlRequest_CreateVdevParam_descriptor_ = CtrlRequest_descriptor_->nested_type(2);
  static const int CtrlRequest_CreateVdevParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_CreateVdevParam, num_pcores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_CreateVdevParam, num_lcores_per_pcore_),
  };
  CtrlRequest_CreateVdevParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlRequest_CreateVdevParam_descriptor_,
      CtrlRequest_CreateVdevParam::default_instance_,
      CtrlRequest_CreateVdevParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_CreateVdevParam, _has_bits_[0]),
      -1,
      -1,
      sizeof(CtrlRequest_CreateVdevParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_CreateVdevParam, _internal_metadata_),
      -1);
  CtrlRequest_VdevRefParam_descriptor_ = CtrlRequest_descriptor_->nested_type(3);
  static const int CtrlRequest_VdevRefParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_VdevRefParam, vdev_id_),
  };
  CtrlRequest_VdevRefParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlRequest_VdevRefParam_descriptor_,
      CtrlRequest_VdevRefParam::default_instance_,
      CtrlRequest_VdevRefParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_VdevRefParam, _has_bits_[0]),
      -1,
      -1,
      sizeof(CtrlRequest_VdevRefParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_VdevRefParam, _internal_metadata_),
      -1);
  CtrlRequest_Type_descriptor_ = CtrlRequest_descriptor_->enum_type(0);
  CtrlResponse_descriptor_ = file->message_type(1);
  static const int CtrlResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse, resource_),
  };
  CtrlResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlResponse_descriptor_,
      CtrlResponse::default_instance_,
      CtrlResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CtrlResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse, _internal_metadata_),
      -1);
  CtrlResponse_TextResponse_descriptor_ = CtrlResponse_descriptor_->nested_type(0);
  static const int CtrlResponse_TextResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse_TextResponse, msg_),
  };
  CtrlResponse_TextResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlResponse_TextResponse_descriptor_,
      CtrlResponse_TextResponse::default_instance_,
      CtrlResponse_TextResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse_TextResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CtrlResponse_TextResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse_TextResponse, _internal_metadata_),
      -1);
  CtrlResponse_ResourceResponse_descriptor_ = CtrlResponse_descriptor_->nested_type(1);
  static const int CtrlResponse_ResourceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse_ResourceResponse, handle_),
  };
  CtrlResponse_ResourceResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlResponse_ResourceResponse_descriptor_,
      CtrlResponse_ResourceResponse::default_instance_,
      CtrlResponse_ResourceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse_ResourceResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CtrlResponse_ResourceResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse_ResourceResponse, _internal_metadata_),
      -1);
  CtrlResponse_Reply_descriptor_ = CtrlResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ctrl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlRequest_descriptor_, &CtrlRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlRequest_PingParam_descriptor_, &CtrlRequest_PingParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlRequest_MallocParam_descriptor_, &CtrlRequest_MallocParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlRequest_CreateVdevParam_descriptor_, &CtrlRequest_CreateVdevParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlRequest_VdevRefParam_descriptor_, &CtrlRequest_VdevRefParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlResponse_descriptor_, &CtrlResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlResponse_TextResponse_descriptor_, &CtrlResponse_TextResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlResponse_ResourceResponse_descriptor_, &CtrlResponse_ResourceResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ctrl_2eproto() {
  delete CtrlRequest::default_instance_;
  delete CtrlRequest_reflection_;
  delete CtrlRequest_PingParam::default_instance_;
  delete CtrlRequest_PingParam_reflection_;
  delete CtrlRequest_MallocParam::default_instance_;
  delete CtrlRequest_MallocParam_reflection_;
  delete CtrlRequest_CreateVdevParam::default_instance_;
  delete CtrlRequest_CreateVdevParam_reflection_;
  delete CtrlRequest_VdevRefParam::default_instance_;
  delete CtrlRequest_VdevRefParam_reflection_;
  delete CtrlResponse::default_instance_;
  delete CtrlResponse_reflection_;
  delete CtrlResponse_TextResponse::default_instance_;
  delete CtrlResponse_TextResponse_reflection_;
  delete CtrlResponse_ResourceResponse::default_instance_;
  delete CtrlResponse_ResourceResponse_reflection_;
}

void protobuf_AddDesc_ctrl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nctrl.proto\022\005knapp\"\205\004\n\013CtrlRequest\022%\n\004t"
    "ype\030\001 \002(\0162\027.knapp.CtrlRequest.Type\0220\n\npi"
    "ng_param\030\002 \001(\0132\034.knapp.CtrlRequest.PingP"
    "aram\0224\n\014malloc_param\030\003 \001(\0132\036.knapp.CtrlR"
    "equest.MallocParam\022=\n\021create_vdev_param\030"
    "\004 \001(\0132\".knapp.CtrlRequest.CreateVdevPara"
    "m\0221\n\010vdev_ref\030\005 \001(\0132\037.knapp.CtrlRequest."
    "VdevRefParam\032\030\n\tPingParam\022\013\n\003msg\030\001 \002(\t\032*"
    "\n\013MallocParam\022\014\n\004size\030\001 \002(\004\022\r\n\005align\030\002 \002"
    "(\004\032C\n\017CreateVdevParam\022\022\n\nnum_pcores\030\001 \002("
    "\r\022\034\n\024num_lcores_per_pcore\030\002 \002(\r\032\037\n\014VdevR"
    "efParam\022\017\n\007vdev_id\030\001 \002(\004\"I\n\004Type\022\010\n\004PING"
    "\020\000\022\n\n\006MALLOC\020\001\022\010\n\004FREE\020\002\022\017\n\013CREATE_VDEV\020"
    "\003\022\020\n\014DESTROY_VDEV\020\004\"\204\002\n\014CtrlResponse\022(\n\005"
    "reply\030\001 \002(\0162\031.knapp.CtrlResponse.Reply\022."
    "\n\004text\030\002 \001(\0132 .knapp.CtrlResponse.TextRe"
    "sponse\0226\n\010resource\030\003 \001(\0132$.knapp.CtrlRes"
    "ponse.ResourceResponse\032\033\n\014TextResponse\022\013"
    "\n\003msg\030\001 \002(\t\032\"\n\020ResourceResponse\022\016\n\006handl"
    "e\030\001 \002(\004\"!\n\005Reply\022\013\n\007SUCCESS\020\000\022\013\n\007FAILURE"
    "\020\001", 802);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ctrl.proto", &protobuf_RegisterTypes);
  CtrlRequest::default_instance_ = new CtrlRequest();
  CtrlRequest_PingParam::default_instance_ = new CtrlRequest_PingParam();
  CtrlRequest_MallocParam::default_instance_ = new CtrlRequest_MallocParam();
  CtrlRequest_CreateVdevParam::default_instance_ = new CtrlRequest_CreateVdevParam();
  CtrlRequest_VdevRefParam::default_instance_ = new CtrlRequest_VdevRefParam();
  CtrlResponse::default_instance_ = new CtrlResponse();
  CtrlResponse_TextResponse::default_instance_ = new CtrlResponse_TextResponse();
  CtrlResponse_ResourceResponse::default_instance_ = new CtrlResponse_ResourceResponse();
  CtrlRequest::default_instance_->InitAsDefaultInstance();
  CtrlRequest_PingParam::default_instance_->InitAsDefaultInstance();
  CtrlRequest_MallocParam::default_instance_->InitAsDefaultInstance();
  CtrlRequest_CreateVdevParam::default_instance_->InitAsDefaultInstance();
  CtrlRequest_VdevRefParam::default_instance_->InitAsDefaultInstance();
  CtrlResponse::default_instance_->InitAsDefaultInstance();
  CtrlResponse_TextResponse::default_instance_->InitAsDefaultInstance();
  CtrlResponse_ResourceResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ctrl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ctrl_2eproto {
  StaticDescriptorInitializer_ctrl_2eproto() {
    protobuf_AddDesc_ctrl_2eproto();
  }
} static_descriptor_initializer_ctrl_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* CtrlRequest_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequest_Type_descriptor_;
}
bool CtrlRequest_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CtrlRequest_Type CtrlRequest::PING;
const CtrlRequest_Type CtrlRequest::MALLOC;
const CtrlRequest_Type CtrlRequest::FREE;
const CtrlRequest_Type CtrlRequest::CREATE_VDEV;
const CtrlRequest_Type CtrlRequest::DESTROY_VDEV;
const CtrlRequest_Type CtrlRequest::Type_MIN;
const CtrlRequest_Type CtrlRequest::Type_MAX;
const int CtrlRequest::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlRequest_PingParam::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlRequest_PingParam::CtrlRequest_PingParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:knapp.CtrlRequest.PingParam)
}

void CtrlRequest_PingParam::InitAsDefaultInstance() {
}

CtrlRequest_PingParam::CtrlRequest_PingParam(const CtrlRequest_PingParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:knapp.CtrlRequest.PingParam)
}

void CtrlRequest_PingParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlRequest_PingParam::~CtrlRequest_PingParam() {
  // @@protoc_insertion_point(destructor:knapp.CtrlRequest.PingParam)
  SharedDtor();
}

void CtrlRequest_PingParam::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CtrlRequest_PingParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlRequest_PingParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequest_PingParam_descriptor_;
}

const CtrlRequest_PingParam& CtrlRequest_PingParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();
  return *default_instance_;
}

CtrlRequest_PingParam* CtrlRequest_PingParam::default_instance_ = NULL;

CtrlRequest_PingParam* CtrlRequest_PingParam::New(::google::protobuf::Arena* arena) const {
  CtrlRequest_PingParam* n = new CtrlRequest_PingParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlRequest_PingParam::Clear() {
// @@protoc_insertion_point(message_clear_start:knapp.CtrlRequest.PingParam)
  if (has_msg()) {
    msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CtrlRequest_PingParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:knapp.CtrlRequest.PingParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "knapp.CtrlRequest.PingParam.msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:knapp.CtrlRequest.PingParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:knapp.CtrlRequest.PingParam)
  return false;
#undef DO_
}

void CtrlRequest_PingParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:knapp.CtrlRequest.PingParam)
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "knapp.CtrlRequest.PingParam.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:knapp.CtrlRequest.PingParam)
}

::google::protobuf::uint8* CtrlRequest_PingParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:knapp.CtrlRequest.PingParam)
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "knapp.CtrlRequest.PingParam.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:knapp.CtrlRequest.PingParam)
  return target;
}

int CtrlRequest_PingParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:knapp.CtrlRequest.PingParam)
  int total_size = 0;

  // required string msg = 1;
  if (has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlRequest_PingParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:knapp.CtrlRequest.PingParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CtrlRequest_PingParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlRequest_PingParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:knapp.CtrlRequest.PingParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:knapp.CtrlRequest.PingParam)
    MergeFrom(*source);
  }
}

void CtrlRequest_PingParam::MergeFrom(const CtrlRequest_PingParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:knapp.CtrlRequest.PingParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CtrlRequest_PingParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:knapp.CtrlRequest.PingParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlRequest_PingParam::CopyFrom(const CtrlRequest_PingParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:knapp.CtrlRequest.PingParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlRequest_PingParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CtrlRequest_PingParam::Swap(CtrlRequest_PingParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlRequest_PingParam::InternalSwap(CtrlRequest_PingParam* other) {
  msg_.Swap(&other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlRequest_PingParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlRequest_PingParam_descriptor_;
  metadata.reflection = CtrlRequest_PingParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlRequest_MallocParam::kSizeFieldNumber;
const int CtrlRequest_MallocParam::kAlignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlRequest_MallocParam::CtrlRequest_MallocParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:knapp.CtrlRequest.MallocParam)
}

void CtrlRequest_MallocParam::InitAsDefaultInstance() {
}

CtrlRequest_MallocParam::CtrlRequest_MallocParam(const CtrlRequest_MallocParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:knapp.CtrlRequest.MallocParam)
}

void CtrlRequest_MallocParam::SharedCtor() {
  _cached_size_ = 0;
  size_ = GOOGLE_ULONGLONG(0);
  align_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlRequest_MallocParam::~CtrlRequest_MallocParam() {
  // @@protoc_insertion_point(destructor:knapp.CtrlRequest.MallocParam)
  SharedDtor();
}

void CtrlRequest_MallocParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CtrlRequest_MallocParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlRequest_MallocParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequest_MallocParam_descriptor_;
}

const CtrlRequest_MallocParam& CtrlRequest_MallocParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();
  return *default_instance_;
}

CtrlRequest_MallocParam* CtrlRequest_MallocParam::default_instance_ = NULL;

CtrlRequest_MallocParam* CtrlRequest_MallocParam::New(::google::protobuf::Arena* arena) const {
  CtrlRequest_MallocParam* n = new CtrlRequest_MallocParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlRequest_MallocParam::Clear() {
// @@protoc_insertion_point(message_clear_start:knapp.CtrlRequest.MallocParam)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CtrlRequest_MallocParam, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CtrlRequest_MallocParam*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(size_, align_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CtrlRequest_MallocParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:knapp.CtrlRequest.MallocParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_align;
        break;
      }

      // required uint64 align = 2;
      case 2: {
        if (tag == 16) {
         parse_align:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &align_)));
          set_has_align();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:knapp.CtrlRequest.MallocParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:knapp.CtrlRequest.MallocParam)
  return false;
#undef DO_
}

void CtrlRequest_MallocParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:knapp.CtrlRequest.MallocParam)
  // required uint64 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }

  // required uint64 align = 2;
  if (has_align()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->align(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:knapp.CtrlRequest.MallocParam)
}

::google::protobuf::uint8* CtrlRequest_MallocParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:knapp.CtrlRequest.MallocParam)
  // required uint64 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->size(), target);
  }

  // required uint64 align = 2;
  if (has_align()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->align(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:knapp.CtrlRequest.MallocParam)
  return target;
}

int CtrlRequest_MallocParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:knapp.CtrlRequest.MallocParam)
  int total_size = 0;

  if (has_size()) {
    // required uint64 size = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  if (has_align()) {
    // required uint64 align = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->align());
  }

  return total_size;
}
int CtrlRequest_MallocParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:knapp.CtrlRequest.MallocParam)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 size = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());

    // required uint64 align = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->align());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlRequest_MallocParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:knapp.CtrlRequest.MallocParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CtrlRequest_MallocParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlRequest_MallocParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:knapp.CtrlRequest.MallocParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:knapp.CtrlRequest.MallocParam)
    MergeFrom(*source);
  }
}

void CtrlRequest_MallocParam::MergeFrom(const CtrlRequest_MallocParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:knapp.CtrlRequest.MallocParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_align()) {
      set_align(from.align());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CtrlRequest_MallocParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:knapp.CtrlRequest.MallocParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlRequest_MallocParam::CopyFrom(const CtrlRequest_MallocParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:knapp.CtrlRequest.MallocParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlRequest_MallocParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CtrlRequest_MallocParam::Swap(CtrlRequest_MallocParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlRequest_MallocParam::InternalSwap(CtrlRequest_MallocParam* other) {
  std::swap(size_, other->size_);
  std::swap(align_, other->align_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlRequest_MallocParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlRequest_MallocParam_descriptor_;
  metadata.reflection = CtrlRequest_MallocParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlRequest_CreateVdevParam::kNumPcoresFieldNumber;
const int CtrlRequest_CreateVdevParam::kNumLcoresPerPcoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlRequest_CreateVdevParam::CtrlRequest_CreateVdevParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:knapp.CtrlRequest.CreateVdevParam)
}

void CtrlRequest_CreateVdevParam::InitAsDefaultInstance() {
}

CtrlRequest_CreateVdevParam::CtrlRequest_CreateVdevParam(const CtrlRequest_CreateVdevParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:knapp.CtrlRequest.CreateVdevParam)
}

void CtrlRequest_CreateVdevParam::SharedCtor() {
  _cached_size_ = 0;
  num_pcores_ = 0u;
  num_lcores_per_pcore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlRequest_CreateVdevParam::~CtrlRequest_CreateVdevParam() {
  // @@protoc_insertion_point(destructor:knapp.CtrlRequest.CreateVdevParam)
  SharedDtor();
}

void CtrlRequest_CreateVdevParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CtrlRequest_CreateVdevParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlRequest_CreateVdevParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequest_CreateVdevParam_descriptor_;
}

const CtrlRequest_CreateVdevParam& CtrlRequest_CreateVdevParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();
  return *default_instance_;
}

CtrlRequest_CreateVdevParam* CtrlRequest_CreateVdevParam::default_instance_ = NULL;

CtrlRequest_CreateVdevParam* CtrlRequest_CreateVdevParam::New(::google::protobuf::Arena* arena) const {
  CtrlRequest_CreateVdevParam* n = new CtrlRequest_CreateVdevParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlRequest_CreateVdevParam::Clear() {
// @@protoc_insertion_point(message_clear_start:knapp.CtrlRequest.CreateVdevParam)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CtrlRequest_CreateVdevParam, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CtrlRequest_CreateVdevParam*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_pcores_, num_lcores_per_pcore_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CtrlRequest_CreateVdevParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:knapp.CtrlRequest.CreateVdevParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num_pcores = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_pcores_)));
          set_has_num_pcores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_lcores_per_pcore;
        break;
      }

      // required uint32 num_lcores_per_pcore = 2;
      case 2: {
        if (tag == 16) {
         parse_num_lcores_per_pcore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_lcores_per_pcore_)));
          set_has_num_lcores_per_pcore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:knapp.CtrlRequest.CreateVdevParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:knapp.CtrlRequest.CreateVdevParam)
  return false;
#undef DO_
}

void CtrlRequest_CreateVdevParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:knapp.CtrlRequest.CreateVdevParam)
  // required uint32 num_pcores = 1;
  if (has_num_pcores()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_pcores(), output);
  }

  // required uint32 num_lcores_per_pcore = 2;
  if (has_num_lcores_per_pcore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_lcores_per_pcore(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:knapp.CtrlRequest.CreateVdevParam)
}

::google::protobuf::uint8* CtrlRequest_CreateVdevParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:knapp.CtrlRequest.CreateVdevParam)
  // required uint32 num_pcores = 1;
  if (has_num_pcores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_pcores(), target);
  }

  // required uint32 num_lcores_per_pcore = 2;
  if (has_num_lcores_per_pcore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_lcores_per_pcore(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:knapp.CtrlRequest.CreateVdevParam)
  return target;
}

int CtrlRequest_CreateVdevParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:knapp.CtrlRequest.CreateVdevParam)
  int total_size = 0;

  if (has_num_pcores()) {
    // required uint32 num_pcores = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_pcores());
  }

  if (has_num_lcores_per_pcore()) {
    // required uint32 num_lcores_per_pcore = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_lcores_per_pcore());
  }

  return total_size;
}
int CtrlRequest_CreateVdevParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:knapp.CtrlRequest.CreateVdevParam)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 num_pcores = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_pcores());

    // required uint32 num_lcores_per_pcore = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_lcores_per_pcore());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlRequest_CreateVdevParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:knapp.CtrlRequest.CreateVdevParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CtrlRequest_CreateVdevParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlRequest_CreateVdevParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:knapp.CtrlRequest.CreateVdevParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:knapp.CtrlRequest.CreateVdevParam)
    MergeFrom(*source);
  }
}

void CtrlRequest_CreateVdevParam::MergeFrom(const CtrlRequest_CreateVdevParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:knapp.CtrlRequest.CreateVdevParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_pcores()) {
      set_num_pcores(from.num_pcores());
    }
    if (from.has_num_lcores_per_pcore()) {
      set_num_lcores_per_pcore(from.num_lcores_per_pcore());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CtrlRequest_CreateVdevParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:knapp.CtrlRequest.CreateVdevParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlRequest_CreateVdevParam::CopyFrom(const CtrlRequest_CreateVdevParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:knapp.CtrlRequest.CreateVdevParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlRequest_CreateVdevParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CtrlRequest_CreateVdevParam::Swap(CtrlRequest_CreateVdevParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlRequest_CreateVdevParam::InternalSwap(CtrlRequest_CreateVdevParam* other) {
  std::swap(num_pcores_, other->num_pcores_);
  std::swap(num_lcores_per_pcore_, other->num_lcores_per_pcore_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlRequest_CreateVdevParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlRequest_CreateVdevParam_descriptor_;
  metadata.reflection = CtrlRequest_CreateVdevParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlRequest_VdevRefParam::kVdevIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlRequest_VdevRefParam::CtrlRequest_VdevRefParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:knapp.CtrlRequest.VdevRefParam)
}

void CtrlRequest_VdevRefParam::InitAsDefaultInstance() {
}

CtrlRequest_VdevRefParam::CtrlRequest_VdevRefParam(const CtrlRequest_VdevRefParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:knapp.CtrlRequest.VdevRefParam)
}

void CtrlRequest_VdevRefParam::SharedCtor() {
  _cached_size_ = 0;
  vdev_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlRequest_VdevRefParam::~CtrlRequest_VdevRefParam() {
  // @@protoc_insertion_point(destructor:knapp.CtrlRequest.VdevRefParam)
  SharedDtor();
}

void CtrlRequest_VdevRefParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CtrlRequest_VdevRefParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlRequest_VdevRefParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequest_VdevRefParam_descriptor_;
}

const CtrlRequest_VdevRefParam& CtrlRequest_VdevRefParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();
  return *default_instance_;
}

CtrlRequest_VdevRefParam* CtrlRequest_VdevRefParam::default_instance_ = NULL;

CtrlRequest_VdevRefParam* CtrlRequest_VdevRefParam::New(::google::protobuf::Arena* arena) const {
  CtrlRequest_VdevRefParam* n = new CtrlRequest_VdevRefParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlRequest_VdevRefParam::Clear() {
// @@protoc_insertion_point(message_clear_start:knapp.CtrlRequest.VdevRefParam)
  vdev_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CtrlRequest_VdevRefParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:knapp.CtrlRequest.VdevRefParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 vdev_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vdev_id_)));
          set_has_vdev_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:knapp.CtrlRequest.VdevRefParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:knapp.CtrlRequest.VdevRefParam)
  return false;
#undef DO_
}

void CtrlRequest_VdevRefParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:knapp.CtrlRequest.VdevRefParam)
  // required uint64 vdev_id = 1;
  if (has_vdev_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->vdev_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:knapp.CtrlRequest.VdevRefParam)
}

::google::protobuf::uint8* CtrlRequest_VdevRefParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:knapp.CtrlRequest.VdevRefParam)
  // required uint64 vdev_id = 1;
  if (has_vdev_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->vdev_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:knapp.CtrlRequest.VdevRefParam)
  return target;
}

int CtrlRequest_VdevRefParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:knapp.CtrlRequest.VdevRefParam)
  int total_size = 0;

  // required uint64 vdev_id = 1;
  if (has_vdev_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->vdev_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlRequest_VdevRefParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:knapp.CtrlRequest.VdevRefParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CtrlRequest_VdevRefParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlRequest_VdevRefParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:knapp.CtrlRequest.VdevRefParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:knapp.CtrlRequest.VdevRefParam)
    MergeFrom(*source);
  }
}

void CtrlRequest_VdevRefParam::MergeFrom(const CtrlRequest_VdevRefParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:knapp.CtrlRequest.VdevRefParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vdev_id()) {
      set_vdev_id(from.vdev_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CtrlRequest_VdevRefParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:knapp.CtrlRequest.VdevRefParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlRequest_VdevRefParam::CopyFrom(const CtrlRequest_VdevRefParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:knapp.CtrlRequest.VdevRefParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlRequest_VdevRefParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CtrlRequest_VdevRefParam::Swap(CtrlRequest_VdevRefParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlRequest_VdevRefParam::InternalSwap(CtrlRequest_VdevRefParam* other) {
  std::swap(vdev_id_, other->vdev_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlRequest_VdevRefParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlRequest_VdevRefParam_descriptor_;
  metadata.reflection = CtrlRequest_VdevRefParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlRequest::kTypeFieldNumber;
const int CtrlRequest::kPingParamFieldNumber;
const int CtrlRequest::kMallocParamFieldNumber;
const int CtrlRequest::kCreateVdevParamFieldNumber;
const int CtrlRequest::kVdevRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlRequest::CtrlRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:knapp.CtrlRequest)
}

void CtrlRequest::InitAsDefaultInstance() {
  ping_param_ = const_cast< ::knapp::CtrlRequest_PingParam*>(&::knapp::CtrlRequest_PingParam::default_instance());
  malloc_param_ = const_cast< ::knapp::CtrlRequest_MallocParam*>(&::knapp::CtrlRequest_MallocParam::default_instance());
  create_vdev_param_ = const_cast< ::knapp::CtrlRequest_CreateVdevParam*>(&::knapp::CtrlRequest_CreateVdevParam::default_instance());
  vdev_ref_ = const_cast< ::knapp::CtrlRequest_VdevRefParam*>(&::knapp::CtrlRequest_VdevRefParam::default_instance());
}

CtrlRequest::CtrlRequest(const CtrlRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:knapp.CtrlRequest)
}

void CtrlRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ping_param_ = NULL;
  malloc_param_ = NULL;
  create_vdev_param_ = NULL;
  vdev_ref_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlRequest::~CtrlRequest() {
  // @@protoc_insertion_point(destructor:knapp.CtrlRequest)
  SharedDtor();
}

void CtrlRequest::SharedDtor() {
  if (this != default_instance_) {
    delete ping_param_;
    delete malloc_param_;
    delete create_vdev_param_;
    delete vdev_ref_;
  }
}

void CtrlRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequest_descriptor_;
}

const CtrlRequest& CtrlRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();
  return *default_instance_;
}

CtrlRequest* CtrlRequest::default_instance_ = NULL;

CtrlRequest* CtrlRequest::New(::google::protobuf::Arena* arena) const {
  CtrlRequest* n = new CtrlRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:knapp.CtrlRequest)
  if (_has_bits_[0 / 32] & 31u) {
    type_ = 0;
    if (has_ping_param()) {
      if (ping_param_ != NULL) ping_param_->::knapp::CtrlRequest_PingParam::Clear();
    }
    if (has_malloc_param()) {
      if (malloc_param_ != NULL) malloc_param_->::knapp::CtrlRequest_MallocParam::Clear();
    }
    if (has_create_vdev_param()) {
      if (create_vdev_param_ != NULL) create_vdev_param_->::knapp::CtrlRequest_CreateVdevParam::Clear();
    }
    if (has_vdev_ref()) {
      if (vdev_ref_ != NULL) vdev_ref_->::knapp::CtrlRequest_VdevRefParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CtrlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:knapp.CtrlRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .knapp.CtrlRequest.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::knapp::CtrlRequest_Type_IsValid(value)) {
            set_type(static_cast< ::knapp::CtrlRequest_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ping_param;
        break;
      }

      // optional .knapp.CtrlRequest.PingParam ping_param = 2;
      case 2: {
        if (tag == 18) {
         parse_ping_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_malloc_param;
        break;
      }

      // optional .knapp.CtrlRequest.MallocParam malloc_param = 3;
      case 3: {
        if (tag == 26) {
         parse_malloc_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_malloc_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_create_vdev_param;
        break;
      }

      // optional .knapp.CtrlRequest.CreateVdevParam create_vdev_param = 4;
      case 4: {
        if (tag == 34) {
         parse_create_vdev_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_vdev_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_vdev_ref;
        break;
      }

      // optional .knapp.CtrlRequest.VdevRefParam vdev_ref = 5;
      case 5: {
        if (tag == 42) {
         parse_vdev_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vdev_ref()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:knapp.CtrlRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:knapp.CtrlRequest)
  return false;
#undef DO_
}

void CtrlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:knapp.CtrlRequest)
  // required .knapp.CtrlRequest.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .knapp.CtrlRequest.PingParam ping_param = 2;
  if (has_ping_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ping_param_, output);
  }

  // optional .knapp.CtrlRequest.MallocParam malloc_param = 3;
  if (has_malloc_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->malloc_param_, output);
  }

  // optional .knapp.CtrlRequest.CreateVdevParam create_vdev_param = 4;
  if (has_create_vdev_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->create_vdev_param_, output);
  }

  // optional .knapp.CtrlRequest.VdevRefParam vdev_ref = 5;
  if (has_vdev_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->vdev_ref_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:knapp.CtrlRequest)
}

::google::protobuf::uint8* CtrlRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:knapp.CtrlRequest)
  // required .knapp.CtrlRequest.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .knapp.CtrlRequest.PingParam ping_param = 2;
  if (has_ping_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->ping_param_, target);
  }

  // optional .knapp.CtrlRequest.MallocParam malloc_param = 3;
  if (has_malloc_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->malloc_param_, target);
  }

  // optional .knapp.CtrlRequest.CreateVdevParam create_vdev_param = 4;
  if (has_create_vdev_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->create_vdev_param_, target);
  }

  // optional .knapp.CtrlRequest.VdevRefParam vdev_ref = 5;
  if (has_vdev_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->vdev_ref_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:knapp.CtrlRequest)
  return target;
}

int CtrlRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:knapp.CtrlRequest)
  int total_size = 0;

  // required .knapp.CtrlRequest.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional .knapp.CtrlRequest.PingParam ping_param = 2;
    if (has_ping_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ping_param_);
    }

    // optional .knapp.CtrlRequest.MallocParam malloc_param = 3;
    if (has_malloc_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->malloc_param_);
    }

    // optional .knapp.CtrlRequest.CreateVdevParam create_vdev_param = 4;
    if (has_create_vdev_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->create_vdev_param_);
    }

    // optional .knapp.CtrlRequest.VdevRefParam vdev_ref = 5;
    if (has_vdev_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vdev_ref_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:knapp.CtrlRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CtrlRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:knapp.CtrlRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:knapp.CtrlRequest)
    MergeFrom(*source);
  }
}

void CtrlRequest::MergeFrom(const CtrlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:knapp.CtrlRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ping_param()) {
      mutable_ping_param()->::knapp::CtrlRequest_PingParam::MergeFrom(from.ping_param());
    }
    if (from.has_malloc_param()) {
      mutable_malloc_param()->::knapp::CtrlRequest_MallocParam::MergeFrom(from.malloc_param());
    }
    if (from.has_create_vdev_param()) {
      mutable_create_vdev_param()->::knapp::CtrlRequest_CreateVdevParam::MergeFrom(from.create_vdev_param());
    }
    if (from.has_vdev_ref()) {
      mutable_vdev_ref()->::knapp::CtrlRequest_VdevRefParam::MergeFrom(from.vdev_ref());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CtrlRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:knapp.CtrlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlRequest::CopyFrom(const CtrlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:knapp.CtrlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ping_param()) {
    if (!this->ping_param_->IsInitialized()) return false;
  }
  if (has_malloc_param()) {
    if (!this->malloc_param_->IsInitialized()) return false;
  }
  if (has_create_vdev_param()) {
    if (!this->create_vdev_param_->IsInitialized()) return false;
  }
  if (has_vdev_ref()) {
    if (!this->vdev_ref_->IsInitialized()) return false;
  }
  return true;
}

void CtrlRequest::Swap(CtrlRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlRequest::InternalSwap(CtrlRequest* other) {
  std::swap(type_, other->type_);
  std::swap(ping_param_, other->ping_param_);
  std::swap(malloc_param_, other->malloc_param_);
  std::swap(create_vdev_param_, other->create_vdev_param_);
  std::swap(vdev_ref_, other->vdev_ref_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlRequest_descriptor_;
  metadata.reflection = CtrlRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlRequest_PingParam

// required string msg = 1;
bool CtrlRequest_PingParam::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlRequest_PingParam::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlRequest_PingParam::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlRequest_PingParam::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
 const ::std::string& CtrlRequest_PingParam::msg() const {
  // @@protoc_insertion_point(field_get:knapp.CtrlRequest.PingParam.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlRequest_PingParam::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:knapp.CtrlRequest.PingParam.msg)
}
 void CtrlRequest_PingParam::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:knapp.CtrlRequest.PingParam.msg)
}
 void CtrlRequest_PingParam::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:knapp.CtrlRequest.PingParam.msg)
}
 ::std::string* CtrlRequest_PingParam::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:knapp.CtrlRequest.PingParam.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CtrlRequest_PingParam::release_msg() {
  // @@protoc_insertion_point(field_release:knapp.CtrlRequest.PingParam.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlRequest_PingParam::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:knapp.CtrlRequest.PingParam.msg)
}

// -------------------------------------------------------------------

// CtrlRequest_MallocParam

// required uint64 size = 1;
bool CtrlRequest_MallocParam::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlRequest_MallocParam::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlRequest_MallocParam::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlRequest_MallocParam::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
 ::google::protobuf::uint64 CtrlRequest_MallocParam::size() const {
  // @@protoc_insertion_point(field_get:knapp.CtrlRequest.MallocParam.size)
  return size_;
}
 void CtrlRequest_MallocParam::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:knapp.CtrlRequest.MallocParam.size)
}

// required uint64 align = 2;
bool CtrlRequest_MallocParam::has_align() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CtrlRequest_MallocParam::set_has_align() {
  _has_bits_[0] |= 0x00000002u;
}
void CtrlRequest_MallocParam::clear_has_align() {
  _has_bits_[0] &= ~0x00000002u;
}
void CtrlRequest_MallocParam::clear_align() {
  align_ = GOOGLE_ULONGLONG(0);
  clear_has_align();
}
 ::google::protobuf::uint64 CtrlRequest_MallocParam::align() const {
  // @@protoc_insertion_point(field_get:knapp.CtrlRequest.MallocParam.align)
  return align_;
}
 void CtrlRequest_MallocParam::set_align(::google::protobuf::uint64 value) {
  set_has_align();
  align_ = value;
  // @@protoc_insertion_point(field_set:knapp.CtrlRequest.MallocParam.align)
}

// -------------------------------------------------------------------

// CtrlRequest_CreateVdevParam

// required uint32 num_pcores = 1;
bool CtrlRequest_CreateVdevParam::has_num_pcores() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlRequest_CreateVdevParam::set_has_num_pcores() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlRequest_CreateVdevParam::clear_has_num_pcores() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlRequest_CreateVdevParam::clear_num_pcores() {
  num_pcores_ = 0u;
  clear_has_num_pcores();
}
 ::google::protobuf::uint32 CtrlRequest_CreateVdevParam::num_pcores() const {
  // @@protoc_insertion_point(field_get:knapp.CtrlRequest.CreateVdevParam.num_pcores)
  return num_pcores_;
}
 void CtrlRequest_CreateVdevParam::set_num_pcores(::google::protobuf::uint32 value) {
  set_has_num_pcores();
  num_pcores_ = value;
  // @@protoc_insertion_point(field_set:knapp.CtrlRequest.CreateVdevParam.num_pcores)
}

// required uint32 num_lcores_per_pcore = 2;
bool CtrlRequest_CreateVdevParam::has_num_lcores_per_pcore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CtrlRequest_CreateVdevParam::set_has_num_lcores_per_pcore() {
  _has_bits_[0] |= 0x00000002u;
}
void CtrlRequest_CreateVdevParam::clear_has_num_lcores_per_pcore() {
  _has_bits_[0] &= ~0x00000002u;
}
void CtrlRequest_CreateVdevParam::clear_num_lcores_per_pcore() {
  num_lcores_per_pcore_ = 0u;
  clear_has_num_lcores_per_pcore();
}
 ::google::protobuf::uint32 CtrlRequest_CreateVdevParam::num_lcores_per_pcore() const {
  // @@protoc_insertion_point(field_get:knapp.CtrlRequest.CreateVdevParam.num_lcores_per_pcore)
  return num_lcores_per_pcore_;
}
 void CtrlRequest_CreateVdevParam::set_num_lcores_per_pcore(::google::protobuf::uint32 value) {
  set_has_num_lcores_per_pcore();
  num_lcores_per_pcore_ = value;
  // @@protoc_insertion_point(field_set:knapp.CtrlRequest.CreateVdevParam.num_lcores_per_pcore)
}

// -------------------------------------------------------------------

// CtrlRequest_VdevRefParam

// required uint64 vdev_id = 1;
bool CtrlRequest_VdevRefParam::has_vdev_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlRequest_VdevRefParam::set_has_vdev_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlRequest_VdevRefParam::clear_has_vdev_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlRequest_VdevRefParam::clear_vdev_id() {
  vdev_id_ = GOOGLE_ULONGLONG(0);
  clear_has_vdev_id();
}
 ::google::protobuf::uint64 CtrlRequest_VdevRefParam::vdev_id() const {
  // @@protoc_insertion_point(field_get:knapp.CtrlRequest.VdevRefParam.vdev_id)
  return vdev_id_;
}
 void CtrlRequest_VdevRefParam::set_vdev_id(::google::protobuf::uint64 value) {
  set_has_vdev_id();
  vdev_id_ = value;
  // @@protoc_insertion_point(field_set:knapp.CtrlRequest.VdevRefParam.vdev_id)
}

// -------------------------------------------------------------------

// CtrlRequest

// required .knapp.CtrlRequest.Type type = 1;
bool CtrlRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::knapp::CtrlRequest_Type CtrlRequest::type() const {
  // @@protoc_insertion_point(field_get:knapp.CtrlRequest.type)
  return static_cast< ::knapp::CtrlRequest_Type >(type_);
}
 void CtrlRequest::set_type(::knapp::CtrlRequest_Type value) {
  assert(::knapp::CtrlRequest_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:knapp.CtrlRequest.type)
}

// optional .knapp.CtrlRequest.PingParam ping_param = 2;
bool CtrlRequest::has_ping_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CtrlRequest::set_has_ping_param() {
  _has_bits_[0] |= 0x00000002u;
}
void CtrlRequest::clear_has_ping_param() {
  _has_bits_[0] &= ~0x00000002u;
}
void CtrlRequest::clear_ping_param() {
  if (ping_param_ != NULL) ping_param_->::knapp::CtrlRequest_PingParam::Clear();
  clear_has_ping_param();
}
const ::knapp::CtrlRequest_PingParam& CtrlRequest::ping_param() const {
  // @@protoc_insertion_point(field_get:knapp.CtrlRequest.ping_param)
  return ping_param_ != NULL ? *ping_param_ : *default_instance_->ping_param_;
}
::knapp::CtrlRequest_PingParam* CtrlRequest::mutable_ping_param() {
  set_has_ping_param();
  if (ping_param_ == NULL) {
    ping_param_ = new ::knapp::CtrlRequest_PingParam;
  }
  // @@protoc_insertion_point(field_mutable:knapp.CtrlRequest.ping_param)
  return ping_param_;
}
::knapp::CtrlRequest_PingParam* CtrlRequest::release_ping_param() {
  // @@protoc_insertion_point(field_release:knapp.CtrlRequest.ping_param)
  clear_has_ping_param();
  ::knapp::CtrlRequest_PingParam* temp = ping_param_;
  ping_param_ = NULL;
  return temp;
}
void CtrlRequest::set_allocated_ping_param(::knapp::CtrlRequest_PingParam* ping_param) {
  delete ping_param_;
  ping_param_ = ping_param;
  if (ping_param) {
    set_has_ping_param();
  } else {
    clear_has_ping_param();
  }
  // @@protoc_insertion_point(field_set_allocated:knapp.CtrlRequest.ping_param)
}

// optional .knapp.CtrlRequest.MallocParam malloc_param = 3;
bool CtrlRequest::has_malloc_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CtrlRequest::set_has_malloc_param() {
  _has_bits_[0] |= 0x00000004u;
}
void CtrlRequest::clear_has_malloc_param() {
  _has_bits_[0] &= ~0x00000004u;
}
void CtrlRequest::clear_malloc_param() {
  if (malloc_param_ != NULL) malloc_param_->::knapp::CtrlRequest_MallocParam::Clear();
  clear_has_malloc_param();
}
const ::knapp::CtrlRequest_MallocParam& CtrlRequest::malloc_param() const {
  // @@protoc_insertion_point(field_get:knapp.CtrlRequest.malloc_param)
  return malloc_param_ != NULL ? *malloc_param_ : *default_instance_->malloc_param_;
}
::knapp::CtrlRequest_MallocParam* CtrlRequest::mutable_malloc_param() {
  set_has_malloc_param();
  if (malloc_param_ == NULL) {
    malloc_param_ = new ::knapp::CtrlRequest_MallocParam;
  }
  // @@protoc_insertion_point(field_mutable:knapp.CtrlRequest.malloc_param)
  return malloc_param_;
}
::knapp::CtrlRequest_MallocParam* CtrlRequest::release_malloc_param() {
  // @@protoc_insertion_point(field_release:knapp.CtrlRequest.malloc_param)
  clear_has_malloc_param();
  ::knapp::CtrlRequest_MallocParam* temp = malloc_param_;
  malloc_param_ = NULL;
  return temp;
}
void CtrlRequest::set_allocated_malloc_param(::knapp::CtrlRequest_MallocParam* malloc_param) {
  delete malloc_param_;
  malloc_param_ = malloc_param;
  if (malloc_param) {
    set_has_malloc_param();
  } else {
    clear_has_malloc_param();
  }
  // @@protoc_insertion_point(field_set_allocated:knapp.CtrlRequest.malloc_param)
}

// optional .knapp.CtrlRequest.CreateVdevParam create_vdev_param = 4;
bool CtrlRequest::has_create_vdev_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CtrlRequest::set_has_create_vdev_param() {
  _has_bits_[0] |= 0x00000008u;
}
void CtrlRequest::clear_has_create_vdev_param() {
  _has_bits_[0] &= ~0x00000008u;
}
void CtrlRequest::clear_create_vdev_param() {
  if (create_vdev_param_ != NULL) create_vdev_param_->::knapp::CtrlRequest_CreateVdevParam::Clear();
  clear_has_create_vdev_param();
}
const ::knapp::CtrlRequest_CreateVdevParam& CtrlRequest::create_vdev_param() const {
  // @@protoc_insertion_point(field_get:knapp.CtrlRequest.create_vdev_param)
  return create_vdev_param_ != NULL ? *create_vdev_param_ : *default_instance_->create_vdev_param_;
}
::knapp::CtrlRequest_CreateVdevParam* CtrlRequest::mutable_create_vdev_param() {
  set_has_create_vdev_param();
  if (create_vdev_param_ == NULL) {
    create_vdev_param_ = new ::knapp::CtrlRequest_CreateVdevParam;
  }
  // @@protoc_insertion_point(field_mutable:knapp.CtrlRequest.create_vdev_param)
  return create_vdev_param_;
}
::knapp::CtrlRequest_CreateVdevParam* CtrlRequest::release_create_vdev_param() {
  // @@protoc_insertion_point(field_release:knapp.CtrlRequest.create_vdev_param)
  clear_has_create_vdev_param();
  ::knapp::CtrlRequest_CreateVdevParam* temp = create_vdev_param_;
  create_vdev_param_ = NULL;
  return temp;
}
void CtrlRequest::set_allocated_create_vdev_param(::knapp::CtrlRequest_CreateVdevParam* create_vdev_param) {
  delete create_vdev_param_;
  create_vdev_param_ = create_vdev_param;
  if (create_vdev_param) {
    set_has_create_vdev_param();
  } else {
    clear_has_create_vdev_param();
  }
  // @@protoc_insertion_point(field_set_allocated:knapp.CtrlRequest.create_vdev_param)
}

// optional .knapp.CtrlRequest.VdevRefParam vdev_ref = 5;
bool CtrlRequest::has_vdev_ref() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CtrlRequest::set_has_vdev_ref() {
  _has_bits_[0] |= 0x00000010u;
}
void CtrlRequest::clear_has_vdev_ref() {
  _has_bits_[0] &= ~0x00000010u;
}
void CtrlRequest::clear_vdev_ref() {
  if (vdev_ref_ != NULL) vdev_ref_->::knapp::CtrlRequest_VdevRefParam::Clear();
  clear_has_vdev_ref();
}
const ::knapp::CtrlRequest_VdevRefParam& CtrlRequest::vdev_ref() const {
  // @@protoc_insertion_point(field_get:knapp.CtrlRequest.vdev_ref)
  return vdev_ref_ != NULL ? *vdev_ref_ : *default_instance_->vdev_ref_;
}
::knapp::CtrlRequest_VdevRefParam* CtrlRequest::mutable_vdev_ref() {
  set_has_vdev_ref();
  if (vdev_ref_ == NULL) {
    vdev_ref_ = new ::knapp::CtrlRequest_VdevRefParam;
  }
  // @@protoc_insertion_point(field_mutable:knapp.CtrlRequest.vdev_ref)
  return vdev_ref_;
}
::knapp::CtrlRequest_VdevRefParam* CtrlRequest::release_vdev_ref() {
  // @@protoc_insertion_point(field_release:knapp.CtrlRequest.vdev_ref)
  clear_has_vdev_ref();
  ::knapp::CtrlRequest_VdevRefParam* temp = vdev_ref_;
  vdev_ref_ = NULL;
  return temp;
}
void CtrlRequest::set_allocated_vdev_ref(::knapp::CtrlRequest_VdevRefParam* vdev_ref) {
  delete vdev_ref_;
  vdev_ref_ = vdev_ref;
  if (vdev_ref) {
    set_has_vdev_ref();
  } else {
    clear_has_vdev_ref();
  }
  // @@protoc_insertion_point(field_set_allocated:knapp.CtrlRequest.vdev_ref)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CtrlResponse_Reply_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlResponse_Reply_descriptor_;
}
bool CtrlResponse_Reply_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CtrlResponse_Reply CtrlResponse::SUCCESS;
const CtrlResponse_Reply CtrlResponse::FAILURE;
const CtrlResponse_Reply CtrlResponse::Reply_MIN;
const CtrlResponse_Reply CtrlResponse::Reply_MAX;
const int CtrlResponse::Reply_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlResponse_TextResponse::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlResponse_TextResponse::CtrlResponse_TextResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:knapp.CtrlResponse.TextResponse)
}

void CtrlResponse_TextResponse::InitAsDefaultInstance() {
}

CtrlResponse_TextResponse::CtrlResponse_TextResponse(const CtrlResponse_TextResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:knapp.CtrlResponse.TextResponse)
}

void CtrlResponse_TextResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlResponse_TextResponse::~CtrlResponse_TextResponse() {
  // @@protoc_insertion_point(destructor:knapp.CtrlResponse.TextResponse)
  SharedDtor();
}

void CtrlResponse_TextResponse::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CtrlResponse_TextResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlResponse_TextResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlResponse_TextResponse_descriptor_;
}

const CtrlResponse_TextResponse& CtrlResponse_TextResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();
  return *default_instance_;
}

CtrlResponse_TextResponse* CtrlResponse_TextResponse::default_instance_ = NULL;

CtrlResponse_TextResponse* CtrlResponse_TextResponse::New(::google::protobuf::Arena* arena) const {
  CtrlResponse_TextResponse* n = new CtrlResponse_TextResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlResponse_TextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:knapp.CtrlResponse.TextResponse)
  if (has_msg()) {
    msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CtrlResponse_TextResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:knapp.CtrlResponse.TextResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "knapp.CtrlResponse.TextResponse.msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:knapp.CtrlResponse.TextResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:knapp.CtrlResponse.TextResponse)
  return false;
#undef DO_
}

void CtrlResponse_TextResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:knapp.CtrlResponse.TextResponse)
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "knapp.CtrlResponse.TextResponse.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:knapp.CtrlResponse.TextResponse)
}

::google::protobuf::uint8* CtrlResponse_TextResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:knapp.CtrlResponse.TextResponse)
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "knapp.CtrlResponse.TextResponse.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:knapp.CtrlResponse.TextResponse)
  return target;
}

int CtrlResponse_TextResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:knapp.CtrlResponse.TextResponse)
  int total_size = 0;

  // required string msg = 1;
  if (has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlResponse_TextResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:knapp.CtrlResponse.TextResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CtrlResponse_TextResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlResponse_TextResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:knapp.CtrlResponse.TextResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:knapp.CtrlResponse.TextResponse)
    MergeFrom(*source);
  }
}

void CtrlResponse_TextResponse::MergeFrom(const CtrlResponse_TextResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:knapp.CtrlResponse.TextResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CtrlResponse_TextResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:knapp.CtrlResponse.TextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlResponse_TextResponse::CopyFrom(const CtrlResponse_TextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:knapp.CtrlResponse.TextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlResponse_TextResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CtrlResponse_TextResponse::Swap(CtrlResponse_TextResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlResponse_TextResponse::InternalSwap(CtrlResponse_TextResponse* other) {
  msg_.Swap(&other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlResponse_TextResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlResponse_TextResponse_descriptor_;
  metadata.reflection = CtrlResponse_TextResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlResponse_ResourceResponse::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlResponse_ResourceResponse::CtrlResponse_ResourceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:knapp.CtrlResponse.ResourceResponse)
}

void CtrlResponse_ResourceResponse::InitAsDefaultInstance() {
}

CtrlResponse_ResourceResponse::CtrlResponse_ResourceResponse(const CtrlResponse_ResourceResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:knapp.CtrlResponse.ResourceResponse)
}

void CtrlResponse_ResourceResponse::SharedCtor() {
  _cached_size_ = 0;
  handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlResponse_ResourceResponse::~CtrlResponse_ResourceResponse() {
  // @@protoc_insertion_point(destructor:knapp.CtrlResponse.ResourceResponse)
  SharedDtor();
}

void CtrlResponse_ResourceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CtrlResponse_ResourceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlResponse_ResourceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlResponse_ResourceResponse_descriptor_;
}

const CtrlResponse_ResourceResponse& CtrlResponse_ResourceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();
  return *default_instance_;
}

CtrlResponse_ResourceResponse* CtrlResponse_ResourceResponse::default_instance_ = NULL;

CtrlResponse_ResourceResponse* CtrlResponse_ResourceResponse::New(::google::protobuf::Arena* arena) const {
  CtrlResponse_ResourceResponse* n = new CtrlResponse_ResourceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlResponse_ResourceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:knapp.CtrlResponse.ResourceResponse)
  handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CtrlResponse_ResourceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:knapp.CtrlResponse.ResourceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:knapp.CtrlResponse.ResourceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:knapp.CtrlResponse.ResourceResponse)
  return false;
#undef DO_
}

void CtrlResponse_ResourceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:knapp.CtrlResponse.ResourceResponse)
  // required uint64 handle = 1;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:knapp.CtrlResponse.ResourceResponse)
}

::google::protobuf::uint8* CtrlResponse_ResourceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:knapp.CtrlResponse.ResourceResponse)
  // required uint64 handle = 1;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:knapp.CtrlResponse.ResourceResponse)
  return target;
}

int CtrlResponse_ResourceResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:knapp.CtrlResponse.ResourceResponse)
  int total_size = 0;

  // required uint64 handle = 1;
  if (has_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->handle());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlResponse_ResourceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:knapp.CtrlResponse.ResourceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CtrlResponse_ResourceResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlResponse_ResourceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:knapp.CtrlResponse.ResourceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:knapp.CtrlResponse.ResourceResponse)
    MergeFrom(*source);
  }
}

void CtrlResponse_ResourceResponse::MergeFrom(const CtrlResponse_ResourceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:knapp.CtrlResponse.ResourceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle()) {
      set_handle(from.handle());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CtrlResponse_ResourceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:knapp.CtrlResponse.ResourceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlResponse_ResourceResponse::CopyFrom(const CtrlResponse_ResourceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:knapp.CtrlResponse.ResourceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlResponse_ResourceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CtrlResponse_ResourceResponse::Swap(CtrlResponse_ResourceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlResponse_ResourceResponse::InternalSwap(CtrlResponse_ResourceResponse* other) {
  std::swap(handle_, other->handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlResponse_ResourceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlResponse_ResourceResponse_descriptor_;
  metadata.reflection = CtrlResponse_ResourceResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlResponse::kReplyFieldNumber;
const int CtrlResponse::kTextFieldNumber;
const int CtrlResponse::kResourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlResponse::CtrlResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:knapp.CtrlResponse)
}

void CtrlResponse::InitAsDefaultInstance() {
  text_ = const_cast< ::knapp::CtrlResponse_TextResponse*>(&::knapp::CtrlResponse_TextResponse::default_instance());
  resource_ = const_cast< ::knapp::CtrlResponse_ResourceResponse*>(&::knapp::CtrlResponse_ResourceResponse::default_instance());
}

CtrlResponse::CtrlResponse(const CtrlResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:knapp.CtrlResponse)
}

void CtrlResponse::SharedCtor() {
  _cached_size_ = 0;
  reply_ = 0;
  text_ = NULL;
  resource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlResponse::~CtrlResponse() {
  // @@protoc_insertion_point(destructor:knapp.CtrlResponse)
  SharedDtor();
}

void CtrlResponse::SharedDtor() {
  if (this != default_instance_) {
    delete text_;
    delete resource_;
  }
}

void CtrlResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlResponse_descriptor_;
}

const CtrlResponse& CtrlResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();
  return *default_instance_;
}

CtrlResponse* CtrlResponse::default_instance_ = NULL;

CtrlResponse* CtrlResponse::New(::google::protobuf::Arena* arena) const {
  CtrlResponse* n = new CtrlResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:knapp.CtrlResponse)
  if (_has_bits_[0 / 32] & 7u) {
    reply_ = 0;
    if (has_text()) {
      if (text_ != NULL) text_->::knapp::CtrlResponse_TextResponse::Clear();
    }
    if (has_resource()) {
      if (resource_ != NULL) resource_->::knapp::CtrlResponse_ResourceResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CtrlResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:knapp.CtrlResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .knapp.CtrlResponse.Reply reply = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::knapp::CtrlResponse_Reply_IsValid(value)) {
            set_reply(static_cast< ::knapp::CtrlResponse_Reply >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional .knapp.CtrlResponse.TextResponse text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resource;
        break;
      }

      // optional .knapp.CtrlResponse.ResourceResponse resource = 3;
      case 3: {
        if (tag == 26) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:knapp.CtrlResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:knapp.CtrlResponse)
  return false;
#undef DO_
}

void CtrlResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:knapp.CtrlResponse)
  // required .knapp.CtrlResponse.Reply reply = 1;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reply(), output);
  }

  // optional .knapp.CtrlResponse.TextResponse text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->text_, output);
  }

  // optional .knapp.CtrlResponse.ResourceResponse resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->resource_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:knapp.CtrlResponse)
}

::google::protobuf::uint8* CtrlResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:knapp.CtrlResponse)
  // required .knapp.CtrlResponse.Reply reply = 1;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reply(), target);
  }

  // optional .knapp.CtrlResponse.TextResponse text = 2;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->text_, target);
  }

  // optional .knapp.CtrlResponse.ResourceResponse resource = 3;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->resource_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:knapp.CtrlResponse)
  return target;
}

int CtrlResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:knapp.CtrlResponse)
  int total_size = 0;

  // required .knapp.CtrlResponse.Reply reply = 1;
  if (has_reply()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reply());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional .knapp.CtrlResponse.TextResponse text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->text_);
    }

    // optional .knapp.CtrlResponse.ResourceResponse resource = 3;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->resource_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:knapp.CtrlResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CtrlResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:knapp.CtrlResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:knapp.CtrlResponse)
    MergeFrom(*source);
  }
}

void CtrlResponse::MergeFrom(const CtrlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:knapp.CtrlResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply()) {
      set_reply(from.reply());
    }
    if (from.has_text()) {
      mutable_text()->::knapp::CtrlResponse_TextResponse::MergeFrom(from.text());
    }
    if (from.has_resource()) {
      mutable_resource()->::knapp::CtrlResponse_ResourceResponse::MergeFrom(from.resource());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CtrlResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:knapp.CtrlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlResponse::CopyFrom(const CtrlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:knapp.CtrlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_text()) {
    if (!this->text_->IsInitialized()) return false;
  }
  if (has_resource()) {
    if (!this->resource_->IsInitialized()) return false;
  }
  return true;
}

void CtrlResponse::Swap(CtrlResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlResponse::InternalSwap(CtrlResponse* other) {
  std::swap(reply_, other->reply_);
  std::swap(text_, other->text_);
  std::swap(resource_, other->resource_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlResponse_descriptor_;
  metadata.reflection = CtrlResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlResponse_TextResponse

// required string msg = 1;
bool CtrlResponse_TextResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlResponse_TextResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlResponse_TextResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlResponse_TextResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
 const ::std::string& CtrlResponse_TextResponse::msg() const {
  // @@protoc_insertion_point(field_get:knapp.CtrlResponse.TextResponse.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlResponse_TextResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:knapp.CtrlResponse.TextResponse.msg)
}
 void CtrlResponse_TextResponse::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:knapp.CtrlResponse.TextResponse.msg)
}
 void CtrlResponse_TextResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:knapp.CtrlResponse.TextResponse.msg)
}
 ::std::string* CtrlResponse_TextResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:knapp.CtrlResponse.TextResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CtrlResponse_TextResponse::release_msg() {
  // @@protoc_insertion_point(field_release:knapp.CtrlResponse.TextResponse.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlResponse_TextResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:knapp.CtrlResponse.TextResponse.msg)
}

// -------------------------------------------------------------------

// CtrlResponse_ResourceResponse

// required uint64 handle = 1;
bool CtrlResponse_ResourceResponse::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlResponse_ResourceResponse::set_has_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlResponse_ResourceResponse::clear_has_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlResponse_ResourceResponse::clear_handle() {
  handle_ = GOOGLE_ULONGLONG(0);
  clear_has_handle();
}
 ::google::protobuf::uint64 CtrlResponse_ResourceResponse::handle() const {
  // @@protoc_insertion_point(field_get:knapp.CtrlResponse.ResourceResponse.handle)
  return handle_;
}
 void CtrlResponse_ResourceResponse::set_handle(::google::protobuf::uint64 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:knapp.CtrlResponse.ResourceResponse.handle)
}

// -------------------------------------------------------------------

// CtrlResponse

// required .knapp.CtrlResponse.Reply reply = 1;
bool CtrlResponse::has_reply() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlResponse::set_has_reply() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlResponse::clear_has_reply() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlResponse::clear_reply() {
  reply_ = 0;
  clear_has_reply();
}
 ::knapp::CtrlResponse_Reply CtrlResponse::reply() const {
  // @@protoc_insertion_point(field_get:knapp.CtrlResponse.reply)
  return static_cast< ::knapp::CtrlResponse_Reply >(reply_);
}
 void CtrlResponse::set_reply(::knapp::CtrlResponse_Reply value) {
  assert(::knapp::CtrlResponse_Reply_IsValid(value));
  set_has_reply();
  reply_ = value;
  // @@protoc_insertion_point(field_set:knapp.CtrlResponse.reply)
}

// optional .knapp.CtrlResponse.TextResponse text = 2;
bool CtrlResponse::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CtrlResponse::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
void CtrlResponse::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void CtrlResponse::clear_text() {
  if (text_ != NULL) text_->::knapp::CtrlResponse_TextResponse::Clear();
  clear_has_text();
}
const ::knapp::CtrlResponse_TextResponse& CtrlResponse::text() const {
  // @@protoc_insertion_point(field_get:knapp.CtrlResponse.text)
  return text_ != NULL ? *text_ : *default_instance_->text_;
}
::knapp::CtrlResponse_TextResponse* CtrlResponse::mutable_text() {
  set_has_text();
  if (text_ == NULL) {
    text_ = new ::knapp::CtrlResponse_TextResponse;
  }
  // @@protoc_insertion_point(field_mutable:knapp.CtrlResponse.text)
  return text_;
}
::knapp::CtrlResponse_TextResponse* CtrlResponse::release_text() {
  // @@protoc_insertion_point(field_release:knapp.CtrlResponse.text)
  clear_has_text();
  ::knapp::CtrlResponse_TextResponse* temp = text_;
  text_ = NULL;
  return temp;
}
void CtrlResponse::set_allocated_text(::knapp::CtrlResponse_TextResponse* text) {
  delete text_;
  text_ = text;
  if (text) {
    set_has_text();
  } else {
    clear_has_text();
  }
  // @@protoc_insertion_point(field_set_allocated:knapp.CtrlResponse.text)
}

// optional .knapp.CtrlResponse.ResourceResponse resource = 3;
bool CtrlResponse::has_resource() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CtrlResponse::set_has_resource() {
  _has_bits_[0] |= 0x00000004u;
}
void CtrlResponse::clear_has_resource() {
  _has_bits_[0] &= ~0x00000004u;
}
void CtrlResponse::clear_resource() {
  if (resource_ != NULL) resource_->::knapp::CtrlResponse_ResourceResponse::Clear();
  clear_has_resource();
}
const ::knapp::CtrlResponse_ResourceResponse& CtrlResponse::resource() const {
  // @@protoc_insertion_point(field_get:knapp.CtrlResponse.resource)
  return resource_ != NULL ? *resource_ : *default_instance_->resource_;
}
::knapp::CtrlResponse_ResourceResponse* CtrlResponse::mutable_resource() {
  set_has_resource();
  if (resource_ == NULL) {
    resource_ = new ::knapp::CtrlResponse_ResourceResponse;
  }
  // @@protoc_insertion_point(field_mutable:knapp.CtrlResponse.resource)
  return resource_;
}
::knapp::CtrlResponse_ResourceResponse* CtrlResponse::release_resource() {
  // @@protoc_insertion_point(field_release:knapp.CtrlResponse.resource)
  clear_has_resource();
  ::knapp::CtrlResponse_ResourceResponse* temp = resource_;
  resource_ = NULL;
  return temp;
}
void CtrlResponse::set_allocated_resource(::knapp::CtrlResponse_ResourceResponse* resource) {
  delete resource_;
  resource_ = resource;
  if (resource) {
    set_has_resource();
  } else {
    clear_has_resource();
  }
  // @@protoc_insertion_point(field_set_allocated:knapp.CtrlResponse.resource)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace knapp

// @@protoc_insertion_point(global_scope)
