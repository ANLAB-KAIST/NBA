// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctrl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include <nba/engines/knapp/ctrl.pb.h>

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace nba {
namespace knapp {

namespace {

const ::google::protobuf::Descriptor* CtrlRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlRequest_reflection_ = NULL;
struct CtrlRequestOneofInstance {
  const ::nba::knapp::CtrlRequest_TextParam* text_;
  const ::nba::knapp::CtrlRequest_MallocParam* malloc_;
  const ::nba::knapp::CtrlRequest_vDeviceInfoParam* vdevinfo_;
  const ::nba::knapp::CtrlRequest_ResourceParam* resource_;
}* CtrlRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* CtrlRequest_TextParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlRequest_TextParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlRequest_MallocParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlRequest_MallocParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlRequest_vDeviceInfoParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlRequest_vDeviceInfoParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlRequest_ResourceParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlRequest_ResourceParam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CtrlRequest_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CtrlResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlResponse_reflection_ = NULL;
struct CtrlResponseOneofInstance {
  const ::nba::knapp::CtrlResponse_TextResponse* text_;
  const ::nba::knapp::CtrlResponse_ResourceResponse* resource_;
}* CtrlResponse_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* CtrlResponse_TextResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlResponse_TextResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlResponse_ResourceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlResponse_ResourceResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CtrlResponse_Reply_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ctrl_2eproto() {
  protobuf_AddDesc_ctrl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ctrl.proto");
  GOOGLE_CHECK(file != NULL);
  CtrlRequest_descriptor_ = file->message_type(0);
  static const int CtrlRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest, type_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CtrlRequest_default_oneof_instance_, text_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CtrlRequest_default_oneof_instance_, malloc_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CtrlRequest_default_oneof_instance_, vdevinfo_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CtrlRequest_default_oneof_instance_, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest, params_),
  };
  CtrlRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlRequest_descriptor_,
      CtrlRequest::default_instance_,
      CtrlRequest_offsets_,
      -1,
      -1,
      -1,
      CtrlRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest, _oneof_case_[0]),
      sizeof(CtrlRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest, _is_default_instance_));
  CtrlRequest_TextParam_descriptor_ = CtrlRequest_descriptor_->nested_type(0);
  static const int CtrlRequest_TextParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_TextParam, msg_),
  };
  CtrlRequest_TextParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlRequest_TextParam_descriptor_,
      CtrlRequest_TextParam::default_instance_,
      CtrlRequest_TextParam_offsets_,
      -1,
      -1,
      -1,
      sizeof(CtrlRequest_TextParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_TextParam, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_TextParam, _is_default_instance_));
  CtrlRequest_MallocParam_descriptor_ = CtrlRequest_descriptor_->nested_type(1);
  static const int CtrlRequest_MallocParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_MallocParam, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_MallocParam, align_),
  };
  CtrlRequest_MallocParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlRequest_MallocParam_descriptor_,
      CtrlRequest_MallocParam::default_instance_,
      CtrlRequest_MallocParam_offsets_,
      -1,
      -1,
      -1,
      sizeof(CtrlRequest_MallocParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_MallocParam, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_MallocParam, _is_default_instance_));
  CtrlRequest_vDeviceInfoParam_descriptor_ = CtrlRequest_descriptor_->nested_type(2);
  static const int CtrlRequest_vDeviceInfoParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_vDeviceInfoParam, num_pcores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_vDeviceInfoParam, num_lcores_per_pcore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_vDeviceInfoParam, pipeline_depth_),
  };
  CtrlRequest_vDeviceInfoParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlRequest_vDeviceInfoParam_descriptor_,
      CtrlRequest_vDeviceInfoParam::default_instance_,
      CtrlRequest_vDeviceInfoParam_offsets_,
      -1,
      -1,
      -1,
      sizeof(CtrlRequest_vDeviceInfoParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_vDeviceInfoParam, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_vDeviceInfoParam, _is_default_instance_));
  CtrlRequest_ResourceParam_descriptor_ = CtrlRequest_descriptor_->nested_type(3);
  static const int CtrlRequest_ResourceParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_ResourceParam, handle_),
  };
  CtrlRequest_ResourceParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlRequest_ResourceParam_descriptor_,
      CtrlRequest_ResourceParam::default_instance_,
      CtrlRequest_ResourceParam_offsets_,
      -1,
      -1,
      -1,
      sizeof(CtrlRequest_ResourceParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_ResourceParam, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequest_ResourceParam, _is_default_instance_));
  CtrlRequest_Type_descriptor_ = CtrlRequest_descriptor_->enum_type(0);
  CtrlResponse_descriptor_ = file->message_type(1);
  static const int CtrlResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse, reply_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CtrlResponse_default_oneof_instance_, text_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CtrlResponse_default_oneof_instance_, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse, data_),
  };
  CtrlResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlResponse_descriptor_,
      CtrlResponse::default_instance_,
      CtrlResponse_offsets_,
      -1,
      -1,
      -1,
      CtrlResponse_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse, _oneof_case_[0]),
      sizeof(CtrlResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse, _is_default_instance_));
  CtrlResponse_TextResponse_descriptor_ = CtrlResponse_descriptor_->nested_type(0);
  static const int CtrlResponse_TextResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse_TextResponse, msg_),
  };
  CtrlResponse_TextResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlResponse_TextResponse_descriptor_,
      CtrlResponse_TextResponse::default_instance_,
      CtrlResponse_TextResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CtrlResponse_TextResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse_TextResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse_TextResponse, _is_default_instance_));
  CtrlResponse_ResourceResponse_descriptor_ = CtrlResponse_descriptor_->nested_type(1);
  static const int CtrlResponse_ResourceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse_ResourceResponse, handle_),
  };
  CtrlResponse_ResourceResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlResponse_ResourceResponse_descriptor_,
      CtrlResponse_ResourceResponse::default_instance_,
      CtrlResponse_ResourceResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CtrlResponse_ResourceResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse_ResourceResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResponse_ResourceResponse, _is_default_instance_));
  CtrlResponse_Reply_descriptor_ = CtrlResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ctrl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlRequest_descriptor_, &CtrlRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlRequest_TextParam_descriptor_, &CtrlRequest_TextParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlRequest_MallocParam_descriptor_, &CtrlRequest_MallocParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlRequest_vDeviceInfoParam_descriptor_, &CtrlRequest_vDeviceInfoParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlRequest_ResourceParam_descriptor_, &CtrlRequest_ResourceParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlResponse_descriptor_, &CtrlResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlResponse_TextResponse_descriptor_, &CtrlResponse_TextResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlResponse_ResourceResponse_descriptor_, &CtrlResponse_ResourceResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ctrl_2eproto() {
  delete CtrlRequest::default_instance_;
  delete CtrlRequest_default_oneof_instance_;
  delete CtrlRequest_reflection_;
  delete CtrlRequest_TextParam::default_instance_;
  delete CtrlRequest_TextParam_reflection_;
  delete CtrlRequest_MallocParam::default_instance_;
  delete CtrlRequest_MallocParam_reflection_;
  delete CtrlRequest_vDeviceInfoParam::default_instance_;
  delete CtrlRequest_vDeviceInfoParam_reflection_;
  delete CtrlRequest_ResourceParam::default_instance_;
  delete CtrlRequest_ResourceParam_reflection_;
  delete CtrlResponse::default_instance_;
  delete CtrlResponse_default_oneof_instance_;
  delete CtrlResponse_reflection_;
  delete CtrlResponse_TextResponse::default_instance_;
  delete CtrlResponse_TextResponse_reflection_;
  delete CtrlResponse_ResourceResponse::default_instance_;
  delete CtrlResponse_ResourceResponse_reflection_;
}

void protobuf_AddDesc_ctrl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nctrl.proto\022\tnba.knapp\"\261\004\n\013CtrlRequest\022"
    ")\n\004type\030\001 \001(\0162\033.nba.knapp.CtrlRequest.Ty"
    "pe\0220\n\004text\030\002 \001(\0132 .nba.knapp.CtrlRequest"
    ".TextParamH\000\0224\n\006malloc\030\003 \001(\0132\".nba.knapp"
    ".CtrlRequest.MallocParamH\000\022;\n\010vDevInfo\030\004"
    " \001(\0132\'.nba.knapp.CtrlRequest.vDeviceInfo"
    "ParamH\000\0228\n\010resource\030\005 \001(\0132$.nba.knapp.Ct"
    "rlRequest.ResourceParamH\000\032\030\n\tTextParam\022\013"
    "\n\003msg\030\001 \001(\t\032*\n\013MallocParam\022\014\n\004size\030\001 \001(\004"
    "\022\r\n\005align\030\002 \001(\004\032\\\n\020vDeviceInfoParam\022\022\n\nn"
    "um_pcores\030\001 \001(\r\022\034\n\024num_lcores_per_pcore\030"
    "\002 \001(\r\022\026\n\016pipeline_depth\030\003 \001(\r\032\037\n\rResourc"
    "eParam\022\016\n\006handle\030\001 \001(\004\"I\n\004Type\022\010\n\004PING\020\000"
    "\022\n\n\006MALLOC\020\001\022\010\n\004FREE\020\002\022\017\n\013CREATE_VDEV\020\003\022"
    "\020\n\014DESTROY_VDEV\020\004B\010\n\006params\"\251\002\n\014CtrlResp"
    "onse\022,\n\005reply\030\001 \001(\0162\035.nba.knapp.CtrlResp"
    "onse.Reply\0224\n\004text\030\002 \001(\0132$.nba.knapp.Ctr"
    "lResponse.TextResponseH\000\022<\n\010resource\030\003 \001"
    "(\0132(.nba.knapp.CtrlResponse.ResourceResp"
    "onseH\000\032\033\n\014TextResponse\022\013\n\003msg\030\001 \001(\t\032\"\n\020R"
    "esourceResponse\022\016\n\006handle\030\001 \001(\004\".\n\005Reply"
    "\022\013\n\007SUCCESS\020\000\022\013\n\007FAILURE\020\001\022\013\n\007INVALID\020\002B"
    "\006\n\004datab\006proto3", 895);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ctrl.proto", &protobuf_RegisterTypes);
  CtrlRequest::default_instance_ = new CtrlRequest();
  CtrlRequest_default_oneof_instance_ = new CtrlRequestOneofInstance();
  CtrlRequest_TextParam::default_instance_ = new CtrlRequest_TextParam();
  CtrlRequest_MallocParam::default_instance_ = new CtrlRequest_MallocParam();
  CtrlRequest_vDeviceInfoParam::default_instance_ = new CtrlRequest_vDeviceInfoParam();
  CtrlRequest_ResourceParam::default_instance_ = new CtrlRequest_ResourceParam();
  CtrlResponse::default_instance_ = new CtrlResponse();
  CtrlResponse_default_oneof_instance_ = new CtrlResponseOneofInstance();
  CtrlResponse_TextResponse::default_instance_ = new CtrlResponse_TextResponse();
  CtrlResponse_ResourceResponse::default_instance_ = new CtrlResponse_ResourceResponse();
  CtrlRequest::default_instance_->InitAsDefaultInstance();
  CtrlRequest_TextParam::default_instance_->InitAsDefaultInstance();
  CtrlRequest_MallocParam::default_instance_->InitAsDefaultInstance();
  CtrlRequest_vDeviceInfoParam::default_instance_->InitAsDefaultInstance();
  CtrlRequest_ResourceParam::default_instance_->InitAsDefaultInstance();
  CtrlResponse::default_instance_->InitAsDefaultInstance();
  CtrlResponse_TextResponse::default_instance_->InitAsDefaultInstance();
  CtrlResponse_ResourceResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ctrl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ctrl_2eproto {
  StaticDescriptorInitializer_ctrl_2eproto() {
    protobuf_AddDesc_ctrl_2eproto();
  }
} static_descriptor_initializer_ctrl_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* CtrlRequest_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequest_Type_descriptor_;
}
bool CtrlRequest_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CtrlRequest_Type CtrlRequest::PING;
const CtrlRequest_Type CtrlRequest::MALLOC;
const CtrlRequest_Type CtrlRequest::FREE;
const CtrlRequest_Type CtrlRequest::CREATE_VDEV;
const CtrlRequest_Type CtrlRequest::DESTROY_VDEV;
const CtrlRequest_Type CtrlRequest::Type_MIN;
const CtrlRequest_Type CtrlRequest::Type_MAX;
const int CtrlRequest::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlRequest_TextParam::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlRequest_TextParam::CtrlRequest_TextParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nba.knapp.CtrlRequest.TextParam)
}

void CtrlRequest_TextParam::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CtrlRequest_TextParam::CtrlRequest_TextParam(const CtrlRequest_TextParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nba.knapp.CtrlRequest.TextParam)
}

void CtrlRequest_TextParam::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CtrlRequest_TextParam::~CtrlRequest_TextParam() {
  // @@protoc_insertion_point(destructor:nba.knapp.CtrlRequest.TextParam)
  SharedDtor();
}

void CtrlRequest_TextParam::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CtrlRequest_TextParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlRequest_TextParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequest_TextParam_descriptor_;
}

const CtrlRequest_TextParam& CtrlRequest_TextParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();
  return *default_instance_;
}

CtrlRequest_TextParam* CtrlRequest_TextParam::default_instance_ = NULL;

CtrlRequest_TextParam* CtrlRequest_TextParam::New(::google::protobuf::Arena* arena) const {
  CtrlRequest_TextParam* n = new CtrlRequest_TextParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlRequest_TextParam::Clear() {
// @@protoc_insertion_point(message_clear_start:nba.knapp.CtrlRequest.TextParam)
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CtrlRequest_TextParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nba.knapp.CtrlRequest.TextParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nba.knapp.CtrlRequest.TextParam.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nba.knapp.CtrlRequest.TextParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nba.knapp.CtrlRequest.TextParam)
  return false;
#undef DO_
}

void CtrlRequest_TextParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nba.knapp.CtrlRequest.TextParam)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nba.knapp.CtrlRequest.TextParam.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:nba.knapp.CtrlRequest.TextParam)
}

::google::protobuf::uint8* CtrlRequest_TextParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nba.knapp.CtrlRequest.TextParam)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nba.knapp.CtrlRequest.TextParam.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nba.knapp.CtrlRequest.TextParam)
  return target;
}

int CtrlRequest_TextParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nba.knapp.CtrlRequest.TextParam)
  int total_size = 0;

  // optional string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlRequest_TextParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nba.knapp.CtrlRequest.TextParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CtrlRequest_TextParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlRequest_TextParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nba.knapp.CtrlRequest.TextParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nba.knapp.CtrlRequest.TextParam)
    MergeFrom(*source);
  }
}

void CtrlRequest_TextParam::MergeFrom(const CtrlRequest_TextParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nba.knapp.CtrlRequest.TextParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void CtrlRequest_TextParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nba.knapp.CtrlRequest.TextParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlRequest_TextParam::CopyFrom(const CtrlRequest_TextParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nba.knapp.CtrlRequest.TextParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlRequest_TextParam::IsInitialized() const {

  return true;
}

void CtrlRequest_TextParam::Swap(CtrlRequest_TextParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlRequest_TextParam::InternalSwap(CtrlRequest_TextParam* other) {
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlRequest_TextParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlRequest_TextParam_descriptor_;
  metadata.reflection = CtrlRequest_TextParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlRequest_MallocParam::kSizeFieldNumber;
const int CtrlRequest_MallocParam::kAlignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlRequest_MallocParam::CtrlRequest_MallocParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nba.knapp.CtrlRequest.MallocParam)
}

void CtrlRequest_MallocParam::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CtrlRequest_MallocParam::CtrlRequest_MallocParam(const CtrlRequest_MallocParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nba.knapp.CtrlRequest.MallocParam)
}

void CtrlRequest_MallocParam::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  size_ = GOOGLE_ULONGLONG(0);
  align_ = GOOGLE_ULONGLONG(0);
}

CtrlRequest_MallocParam::~CtrlRequest_MallocParam() {
  // @@protoc_insertion_point(destructor:nba.knapp.CtrlRequest.MallocParam)
  SharedDtor();
}

void CtrlRequest_MallocParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CtrlRequest_MallocParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlRequest_MallocParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequest_MallocParam_descriptor_;
}

const CtrlRequest_MallocParam& CtrlRequest_MallocParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();
  return *default_instance_;
}

CtrlRequest_MallocParam* CtrlRequest_MallocParam::default_instance_ = NULL;

CtrlRequest_MallocParam* CtrlRequest_MallocParam::New(::google::protobuf::Arena* arena) const {
  CtrlRequest_MallocParam* n = new CtrlRequest_MallocParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlRequest_MallocParam::Clear() {
// @@protoc_insertion_point(message_clear_start:nba.knapp.CtrlRequest.MallocParam)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CtrlRequest_MallocParam, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CtrlRequest_MallocParam*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(size_, align_);

#undef ZR_HELPER_
#undef ZR_

}

bool CtrlRequest_MallocParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nba.knapp.CtrlRequest.MallocParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_align;
        break;
      }

      // optional uint64 align = 2;
      case 2: {
        if (tag == 16) {
         parse_align:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &align_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nba.knapp.CtrlRequest.MallocParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nba.knapp.CtrlRequest.MallocParam)
  return false;
#undef DO_
}

void CtrlRequest_MallocParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nba.knapp.CtrlRequest.MallocParam)
  // optional uint64 size = 1;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }

  // optional uint64 align = 2;
  if (this->align() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->align(), output);
  }

  // @@protoc_insertion_point(serialize_end:nba.knapp.CtrlRequest.MallocParam)
}

::google::protobuf::uint8* CtrlRequest_MallocParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nba.knapp.CtrlRequest.MallocParam)
  // optional uint64 size = 1;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->size(), target);
  }

  // optional uint64 align = 2;
  if (this->align() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->align(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nba.knapp.CtrlRequest.MallocParam)
  return target;
}

int CtrlRequest_MallocParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nba.knapp.CtrlRequest.MallocParam)
  int total_size = 0;

  // optional uint64 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // optional uint64 align = 2;
  if (this->align() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->align());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlRequest_MallocParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nba.knapp.CtrlRequest.MallocParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CtrlRequest_MallocParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlRequest_MallocParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nba.knapp.CtrlRequest.MallocParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nba.knapp.CtrlRequest.MallocParam)
    MergeFrom(*source);
  }
}

void CtrlRequest_MallocParam::MergeFrom(const CtrlRequest_MallocParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nba.knapp.CtrlRequest.MallocParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.align() != 0) {
    set_align(from.align());
  }
}

void CtrlRequest_MallocParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nba.knapp.CtrlRequest.MallocParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlRequest_MallocParam::CopyFrom(const CtrlRequest_MallocParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nba.knapp.CtrlRequest.MallocParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlRequest_MallocParam::IsInitialized() const {

  return true;
}

void CtrlRequest_MallocParam::Swap(CtrlRequest_MallocParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlRequest_MallocParam::InternalSwap(CtrlRequest_MallocParam* other) {
  std::swap(size_, other->size_);
  std::swap(align_, other->align_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlRequest_MallocParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlRequest_MallocParam_descriptor_;
  metadata.reflection = CtrlRequest_MallocParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlRequest_vDeviceInfoParam::kNumPcoresFieldNumber;
const int CtrlRequest_vDeviceInfoParam::kNumLcoresPerPcoreFieldNumber;
const int CtrlRequest_vDeviceInfoParam::kPipelineDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlRequest_vDeviceInfoParam::CtrlRequest_vDeviceInfoParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nba.knapp.CtrlRequest.vDeviceInfoParam)
}

void CtrlRequest_vDeviceInfoParam::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CtrlRequest_vDeviceInfoParam::CtrlRequest_vDeviceInfoParam(const CtrlRequest_vDeviceInfoParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nba.knapp.CtrlRequest.vDeviceInfoParam)
}

void CtrlRequest_vDeviceInfoParam::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  num_pcores_ = 0u;
  num_lcores_per_pcore_ = 0u;
  pipeline_depth_ = 0u;
}

CtrlRequest_vDeviceInfoParam::~CtrlRequest_vDeviceInfoParam() {
  // @@protoc_insertion_point(destructor:nba.knapp.CtrlRequest.vDeviceInfoParam)
  SharedDtor();
}

void CtrlRequest_vDeviceInfoParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CtrlRequest_vDeviceInfoParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlRequest_vDeviceInfoParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequest_vDeviceInfoParam_descriptor_;
}

const CtrlRequest_vDeviceInfoParam& CtrlRequest_vDeviceInfoParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();
  return *default_instance_;
}

CtrlRequest_vDeviceInfoParam* CtrlRequest_vDeviceInfoParam::default_instance_ = NULL;

CtrlRequest_vDeviceInfoParam* CtrlRequest_vDeviceInfoParam::New(::google::protobuf::Arena* arena) const {
  CtrlRequest_vDeviceInfoParam* n = new CtrlRequest_vDeviceInfoParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlRequest_vDeviceInfoParam::Clear() {
// @@protoc_insertion_point(message_clear_start:nba.knapp.CtrlRequest.vDeviceInfoParam)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CtrlRequest_vDeviceInfoParam, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CtrlRequest_vDeviceInfoParam*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_pcores_, pipeline_depth_);

#undef ZR_HELPER_
#undef ZR_

}

bool CtrlRequest_vDeviceInfoParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nba.knapp.CtrlRequest.vDeviceInfoParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_pcores = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_pcores_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_lcores_per_pcore;
        break;
      }

      // optional uint32 num_lcores_per_pcore = 2;
      case 2: {
        if (tag == 16) {
         parse_num_lcores_per_pcore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_lcores_per_pcore_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pipeline_depth;
        break;
      }

      // optional uint32 pipeline_depth = 3;
      case 3: {
        if (tag == 24) {
         parse_pipeline_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pipeline_depth_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nba.knapp.CtrlRequest.vDeviceInfoParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nba.knapp.CtrlRequest.vDeviceInfoParam)
  return false;
#undef DO_
}

void CtrlRequest_vDeviceInfoParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nba.knapp.CtrlRequest.vDeviceInfoParam)
  // optional uint32 num_pcores = 1;
  if (this->num_pcores() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_pcores(), output);
  }

  // optional uint32 num_lcores_per_pcore = 2;
  if (this->num_lcores_per_pcore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_lcores_per_pcore(), output);
  }

  // optional uint32 pipeline_depth = 3;
  if (this->pipeline_depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pipeline_depth(), output);
  }

  // @@protoc_insertion_point(serialize_end:nba.knapp.CtrlRequest.vDeviceInfoParam)
}

::google::protobuf::uint8* CtrlRequest_vDeviceInfoParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nba.knapp.CtrlRequest.vDeviceInfoParam)
  // optional uint32 num_pcores = 1;
  if (this->num_pcores() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_pcores(), target);
  }

  // optional uint32 num_lcores_per_pcore = 2;
  if (this->num_lcores_per_pcore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_lcores_per_pcore(), target);
  }

  // optional uint32 pipeline_depth = 3;
  if (this->pipeline_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pipeline_depth(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nba.knapp.CtrlRequest.vDeviceInfoParam)
  return target;
}

int CtrlRequest_vDeviceInfoParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nba.knapp.CtrlRequest.vDeviceInfoParam)
  int total_size = 0;

  // optional uint32 num_pcores = 1;
  if (this->num_pcores() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_pcores());
  }

  // optional uint32 num_lcores_per_pcore = 2;
  if (this->num_lcores_per_pcore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_lcores_per_pcore());
  }

  // optional uint32 pipeline_depth = 3;
  if (this->pipeline_depth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pipeline_depth());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlRequest_vDeviceInfoParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nba.knapp.CtrlRequest.vDeviceInfoParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CtrlRequest_vDeviceInfoParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlRequest_vDeviceInfoParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nba.knapp.CtrlRequest.vDeviceInfoParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nba.knapp.CtrlRequest.vDeviceInfoParam)
    MergeFrom(*source);
  }
}

void CtrlRequest_vDeviceInfoParam::MergeFrom(const CtrlRequest_vDeviceInfoParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nba.knapp.CtrlRequest.vDeviceInfoParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.num_pcores() != 0) {
    set_num_pcores(from.num_pcores());
  }
  if (from.num_lcores_per_pcore() != 0) {
    set_num_lcores_per_pcore(from.num_lcores_per_pcore());
  }
  if (from.pipeline_depth() != 0) {
    set_pipeline_depth(from.pipeline_depth());
  }
}

void CtrlRequest_vDeviceInfoParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nba.knapp.CtrlRequest.vDeviceInfoParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlRequest_vDeviceInfoParam::CopyFrom(const CtrlRequest_vDeviceInfoParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nba.knapp.CtrlRequest.vDeviceInfoParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlRequest_vDeviceInfoParam::IsInitialized() const {

  return true;
}

void CtrlRequest_vDeviceInfoParam::Swap(CtrlRequest_vDeviceInfoParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlRequest_vDeviceInfoParam::InternalSwap(CtrlRequest_vDeviceInfoParam* other) {
  std::swap(num_pcores_, other->num_pcores_);
  std::swap(num_lcores_per_pcore_, other->num_lcores_per_pcore_);
  std::swap(pipeline_depth_, other->pipeline_depth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlRequest_vDeviceInfoParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlRequest_vDeviceInfoParam_descriptor_;
  metadata.reflection = CtrlRequest_vDeviceInfoParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlRequest_ResourceParam::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlRequest_ResourceParam::CtrlRequest_ResourceParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nba.knapp.CtrlRequest.ResourceParam)
}

void CtrlRequest_ResourceParam::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CtrlRequest_ResourceParam::CtrlRequest_ResourceParam(const CtrlRequest_ResourceParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nba.knapp.CtrlRequest.ResourceParam)
}

void CtrlRequest_ResourceParam::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  handle_ = GOOGLE_ULONGLONG(0);
}

CtrlRequest_ResourceParam::~CtrlRequest_ResourceParam() {
  // @@protoc_insertion_point(destructor:nba.knapp.CtrlRequest.ResourceParam)
  SharedDtor();
}

void CtrlRequest_ResourceParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CtrlRequest_ResourceParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlRequest_ResourceParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequest_ResourceParam_descriptor_;
}

const CtrlRequest_ResourceParam& CtrlRequest_ResourceParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();
  return *default_instance_;
}

CtrlRequest_ResourceParam* CtrlRequest_ResourceParam::default_instance_ = NULL;

CtrlRequest_ResourceParam* CtrlRequest_ResourceParam::New(::google::protobuf::Arena* arena) const {
  CtrlRequest_ResourceParam* n = new CtrlRequest_ResourceParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlRequest_ResourceParam::Clear() {
// @@protoc_insertion_point(message_clear_start:nba.knapp.CtrlRequest.ResourceParam)
  handle_ = GOOGLE_ULONGLONG(0);
}

bool CtrlRequest_ResourceParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nba.knapp.CtrlRequest.ResourceParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nba.knapp.CtrlRequest.ResourceParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nba.knapp.CtrlRequest.ResourceParam)
  return false;
#undef DO_
}

void CtrlRequest_ResourceParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nba.knapp.CtrlRequest.ResourceParam)
  // optional uint64 handle = 1;
  if (this->handle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:nba.knapp.CtrlRequest.ResourceParam)
}

::google::protobuf::uint8* CtrlRequest_ResourceParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nba.knapp.CtrlRequest.ResourceParam)
  // optional uint64 handle = 1;
  if (this->handle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nba.knapp.CtrlRequest.ResourceParam)
  return target;
}

int CtrlRequest_ResourceParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nba.knapp.CtrlRequest.ResourceParam)
  int total_size = 0;

  // optional uint64 handle = 1;
  if (this->handle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->handle());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlRequest_ResourceParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nba.knapp.CtrlRequest.ResourceParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CtrlRequest_ResourceParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlRequest_ResourceParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nba.knapp.CtrlRequest.ResourceParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nba.knapp.CtrlRequest.ResourceParam)
    MergeFrom(*source);
  }
}

void CtrlRequest_ResourceParam::MergeFrom(const CtrlRequest_ResourceParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nba.knapp.CtrlRequest.ResourceParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.handle() != 0) {
    set_handle(from.handle());
  }
}

void CtrlRequest_ResourceParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nba.knapp.CtrlRequest.ResourceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlRequest_ResourceParam::CopyFrom(const CtrlRequest_ResourceParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nba.knapp.CtrlRequest.ResourceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlRequest_ResourceParam::IsInitialized() const {

  return true;
}

void CtrlRequest_ResourceParam::Swap(CtrlRequest_ResourceParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlRequest_ResourceParam::InternalSwap(CtrlRequest_ResourceParam* other) {
  std::swap(handle_, other->handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlRequest_ResourceParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlRequest_ResourceParam_descriptor_;
  metadata.reflection = CtrlRequest_ResourceParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlRequest::kTypeFieldNumber;
const int CtrlRequest::kTextFieldNumber;
const int CtrlRequest::kMallocFieldNumber;
const int CtrlRequest::kVDevInfoFieldNumber;
const int CtrlRequest::kResourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlRequest::CtrlRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nba.knapp.CtrlRequest)
}

void CtrlRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  CtrlRequest_default_oneof_instance_->text_ = const_cast< ::nba::knapp::CtrlRequest_TextParam*>(&::nba::knapp::CtrlRequest_TextParam::default_instance());
  CtrlRequest_default_oneof_instance_->malloc_ = const_cast< ::nba::knapp::CtrlRequest_MallocParam*>(&::nba::knapp::CtrlRequest_MallocParam::default_instance());
  CtrlRequest_default_oneof_instance_->vdevinfo_ = const_cast< ::nba::knapp::CtrlRequest_vDeviceInfoParam*>(&::nba::knapp::CtrlRequest_vDeviceInfoParam::default_instance());
  CtrlRequest_default_oneof_instance_->resource_ = const_cast< ::nba::knapp::CtrlRequest_ResourceParam*>(&::nba::knapp::CtrlRequest_ResourceParam::default_instance());
}

CtrlRequest::CtrlRequest(const CtrlRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nba.knapp.CtrlRequest)
}

void CtrlRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  clear_has_params();
}

CtrlRequest::~CtrlRequest() {
  // @@protoc_insertion_point(destructor:nba.knapp.CtrlRequest)
  SharedDtor();
}

void CtrlRequest::SharedDtor() {
  if (has_params()) {
    clear_params();
  }
  if (this != default_instance_) {
  }
}

void CtrlRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequest_descriptor_;
}

const CtrlRequest& CtrlRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();
  return *default_instance_;
}

CtrlRequest* CtrlRequest::default_instance_ = NULL;

CtrlRequest* CtrlRequest::New(::google::protobuf::Arena* arena) const {
  CtrlRequest* n = new CtrlRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlRequest::clear_params() {
// @@protoc_insertion_point(one_of_clear_start:nba.knapp.CtrlRequest)
  switch(params_case()) {
    case kText: {
      delete params_.text_;
      break;
    }
    case kMalloc: {
      delete params_.malloc_;
      break;
    }
    case kVDevInfo: {
      delete params_.vdevinfo_;
      break;
    }
    case kResource: {
      delete params_.resource_;
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMS_NOT_SET;
}


void CtrlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nba.knapp.CtrlRequest)
  type_ = 0;
  clear_params();
}

bool CtrlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nba.knapp.CtrlRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .nba.knapp.CtrlRequest.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::nba::knapp::CtrlRequest_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional .nba.knapp.CtrlRequest.TextParam text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_malloc;
        break;
      }

      // optional .nba.knapp.CtrlRequest.MallocParam malloc = 3;
      case 3: {
        if (tag == 26) {
         parse_malloc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_malloc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vDevInfo;
        break;
      }

      // optional .nba.knapp.CtrlRequest.vDeviceInfoParam vDevInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_vDevInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vdevinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_resource;
        break;
      }

      // optional .nba.knapp.CtrlRequest.ResourceParam resource = 5;
      case 5: {
        if (tag == 42) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nba.knapp.CtrlRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nba.knapp.CtrlRequest)
  return false;
#undef DO_
}

void CtrlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nba.knapp.CtrlRequest)
  // optional .nba.knapp.CtrlRequest.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .nba.knapp.CtrlRequest.TextParam text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *params_.text_, output);
  }

  // optional .nba.knapp.CtrlRequest.MallocParam malloc = 3;
  if (has_malloc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *params_.malloc_, output);
  }

  // optional .nba.knapp.CtrlRequest.vDeviceInfoParam vDevInfo = 4;
  if (has_vdevinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *params_.vdevinfo_, output);
  }

  // optional .nba.knapp.CtrlRequest.ResourceParam resource = 5;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *params_.resource_, output);
  }

  // @@protoc_insertion_point(serialize_end:nba.knapp.CtrlRequest)
}

::google::protobuf::uint8* CtrlRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nba.knapp.CtrlRequest)
  // optional .nba.knapp.CtrlRequest.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .nba.knapp.CtrlRequest.TextParam text = 2;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *params_.text_, target);
  }

  // optional .nba.knapp.CtrlRequest.MallocParam malloc = 3;
  if (has_malloc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *params_.malloc_, target);
  }

  // optional .nba.knapp.CtrlRequest.vDeviceInfoParam vDevInfo = 4;
  if (has_vdevinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *params_.vdevinfo_, target);
  }

  // optional .nba.knapp.CtrlRequest.ResourceParam resource = 5;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *params_.resource_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nba.knapp.CtrlRequest)
  return target;
}

int CtrlRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nba.knapp.CtrlRequest)
  int total_size = 0;

  // optional .nba.knapp.CtrlRequest.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (params_case()) {
    // optional .nba.knapp.CtrlRequest.TextParam text = 2;
    case kText: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *params_.text_);
      break;
    }
    // optional .nba.knapp.CtrlRequest.MallocParam malloc = 3;
    case kMalloc: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *params_.malloc_);
      break;
    }
    // optional .nba.knapp.CtrlRequest.vDeviceInfoParam vDevInfo = 4;
    case kVDevInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *params_.vdevinfo_);
      break;
    }
    // optional .nba.knapp.CtrlRequest.ResourceParam resource = 5;
    case kResource: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *params_.resource_);
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nba.knapp.CtrlRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CtrlRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nba.knapp.CtrlRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nba.knapp.CtrlRequest)
    MergeFrom(*source);
  }
}

void CtrlRequest::MergeFrom(const CtrlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nba.knapp.CtrlRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.params_case()) {
    case kText: {
      mutable_text()->::nba::knapp::CtrlRequest_TextParam::MergeFrom(from.text());
      break;
    }
    case kMalloc: {
      mutable_malloc()->::nba::knapp::CtrlRequest_MallocParam::MergeFrom(from.malloc());
      break;
    }
    case kVDevInfo: {
      mutable_vdevinfo()->::nba::knapp::CtrlRequest_vDeviceInfoParam::MergeFrom(from.vdevinfo());
      break;
    }
    case kResource: {
      mutable_resource()->::nba::knapp::CtrlRequest_ResourceParam::MergeFrom(from.resource());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void CtrlRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nba.knapp.CtrlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlRequest::CopyFrom(const CtrlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nba.knapp.CtrlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlRequest::IsInitialized() const {

  return true;
}

void CtrlRequest::Swap(CtrlRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlRequest::InternalSwap(CtrlRequest* other) {
  std::swap(type_, other->type_);
  std::swap(params_, other->params_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlRequest_descriptor_;
  metadata.reflection = CtrlRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlRequest_TextParam

// optional string msg = 1;
void CtrlRequest_TextParam::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CtrlRequest_TextParam::msg() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.TextParam.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlRequest_TextParam::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlRequest.TextParam.msg)
}
 void CtrlRequest_TextParam::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nba.knapp.CtrlRequest.TextParam.msg)
}
 void CtrlRequest_TextParam::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nba.knapp.CtrlRequest.TextParam.msg)
}
 ::std::string* CtrlRequest_TextParam::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:nba.knapp.CtrlRequest.TextParam.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CtrlRequest_TextParam::release_msg() {
  // @@protoc_insertion_point(field_release:nba.knapp.CtrlRequest.TextParam.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlRequest_TextParam::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:nba.knapp.CtrlRequest.TextParam.msg)
}

// -------------------------------------------------------------------

// CtrlRequest_MallocParam

// optional uint64 size = 1;
void CtrlRequest_MallocParam::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 CtrlRequest_MallocParam::size() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.MallocParam.size)
  return size_;
}
 void CtrlRequest_MallocParam::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlRequest.MallocParam.size)
}

// optional uint64 align = 2;
void CtrlRequest_MallocParam::clear_align() {
  align_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 CtrlRequest_MallocParam::align() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.MallocParam.align)
  return align_;
}
 void CtrlRequest_MallocParam::set_align(::google::protobuf::uint64 value) {
  
  align_ = value;
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlRequest.MallocParam.align)
}

// -------------------------------------------------------------------

// CtrlRequest_vDeviceInfoParam

// optional uint32 num_pcores = 1;
void CtrlRequest_vDeviceInfoParam::clear_num_pcores() {
  num_pcores_ = 0u;
}
 ::google::protobuf::uint32 CtrlRequest_vDeviceInfoParam::num_pcores() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.vDeviceInfoParam.num_pcores)
  return num_pcores_;
}
 void CtrlRequest_vDeviceInfoParam::set_num_pcores(::google::protobuf::uint32 value) {
  
  num_pcores_ = value;
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlRequest.vDeviceInfoParam.num_pcores)
}

// optional uint32 num_lcores_per_pcore = 2;
void CtrlRequest_vDeviceInfoParam::clear_num_lcores_per_pcore() {
  num_lcores_per_pcore_ = 0u;
}
 ::google::protobuf::uint32 CtrlRequest_vDeviceInfoParam::num_lcores_per_pcore() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.vDeviceInfoParam.num_lcores_per_pcore)
  return num_lcores_per_pcore_;
}
 void CtrlRequest_vDeviceInfoParam::set_num_lcores_per_pcore(::google::protobuf::uint32 value) {
  
  num_lcores_per_pcore_ = value;
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlRequest.vDeviceInfoParam.num_lcores_per_pcore)
}

// optional uint32 pipeline_depth = 3;
void CtrlRequest_vDeviceInfoParam::clear_pipeline_depth() {
  pipeline_depth_ = 0u;
}
 ::google::protobuf::uint32 CtrlRequest_vDeviceInfoParam::pipeline_depth() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.vDeviceInfoParam.pipeline_depth)
  return pipeline_depth_;
}
 void CtrlRequest_vDeviceInfoParam::set_pipeline_depth(::google::protobuf::uint32 value) {
  
  pipeline_depth_ = value;
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlRequest.vDeviceInfoParam.pipeline_depth)
}

// -------------------------------------------------------------------

// CtrlRequest_ResourceParam

// optional uint64 handle = 1;
void CtrlRequest_ResourceParam::clear_handle() {
  handle_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 CtrlRequest_ResourceParam::handle() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.ResourceParam.handle)
  return handle_;
}
 void CtrlRequest_ResourceParam::set_handle(::google::protobuf::uint64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlRequest.ResourceParam.handle)
}

// -------------------------------------------------------------------

// CtrlRequest

// optional .nba.knapp.CtrlRequest.Type type = 1;
void CtrlRequest::clear_type() {
  type_ = 0;
}
 ::nba::knapp::CtrlRequest_Type CtrlRequest::type() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.type)
  return static_cast< ::nba::knapp::CtrlRequest_Type >(type_);
}
 void CtrlRequest::set_type(::nba::knapp::CtrlRequest_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlRequest.type)
}

// optional .nba.knapp.CtrlRequest.TextParam text = 2;
bool CtrlRequest::has_text() const {
  return params_case() == kText;
}
void CtrlRequest::set_has_text() {
  _oneof_case_[0] = kText;
}
void CtrlRequest::clear_text() {
  if (has_text()) {
    delete params_.text_;
    clear_has_params();
  }
}
 const ::nba::knapp::CtrlRequest_TextParam& CtrlRequest::text() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.text)
  return has_text()
      ? *params_.text_
      : ::nba::knapp::CtrlRequest_TextParam::default_instance();
}
::nba::knapp::CtrlRequest_TextParam* CtrlRequest::mutable_text() {
  if (!has_text()) {
    clear_params();
    set_has_text();
    params_.text_ = new ::nba::knapp::CtrlRequest_TextParam;
  }
  // @@protoc_insertion_point(field_mutable:nba.knapp.CtrlRequest.text)
  return params_.text_;
}
::nba::knapp::CtrlRequest_TextParam* CtrlRequest::release_text() {
  // @@protoc_insertion_point(field_release:nba.knapp.CtrlRequest.text)
  if (has_text()) {
    clear_has_params();
    ::nba::knapp::CtrlRequest_TextParam* temp = params_.text_;
    params_.text_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CtrlRequest::set_allocated_text(::nba::knapp::CtrlRequest_TextParam* text) {
  clear_params();
  if (text) {
    set_has_text();
    params_.text_ = text;
  }
  // @@protoc_insertion_point(field_set_allocated:nba.knapp.CtrlRequest.text)
}

// optional .nba.knapp.CtrlRequest.MallocParam malloc = 3;
bool CtrlRequest::has_malloc() const {
  return params_case() == kMalloc;
}
void CtrlRequest::set_has_malloc() {
  _oneof_case_[0] = kMalloc;
}
void CtrlRequest::clear_malloc() {
  if (has_malloc()) {
    delete params_.malloc_;
    clear_has_params();
  }
}
 const ::nba::knapp::CtrlRequest_MallocParam& CtrlRequest::malloc() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.malloc)
  return has_malloc()
      ? *params_.malloc_
      : ::nba::knapp::CtrlRequest_MallocParam::default_instance();
}
::nba::knapp::CtrlRequest_MallocParam* CtrlRequest::mutable_malloc() {
  if (!has_malloc()) {
    clear_params();
    set_has_malloc();
    params_.malloc_ = new ::nba::knapp::CtrlRequest_MallocParam;
  }
  // @@protoc_insertion_point(field_mutable:nba.knapp.CtrlRequest.malloc)
  return params_.malloc_;
}
::nba::knapp::CtrlRequest_MallocParam* CtrlRequest::release_malloc() {
  // @@protoc_insertion_point(field_release:nba.knapp.CtrlRequest.malloc)
  if (has_malloc()) {
    clear_has_params();
    ::nba::knapp::CtrlRequest_MallocParam* temp = params_.malloc_;
    params_.malloc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CtrlRequest::set_allocated_malloc(::nba::knapp::CtrlRequest_MallocParam* malloc) {
  clear_params();
  if (malloc) {
    set_has_malloc();
    params_.malloc_ = malloc;
  }
  // @@protoc_insertion_point(field_set_allocated:nba.knapp.CtrlRequest.malloc)
}

// optional .nba.knapp.CtrlRequest.vDeviceInfoParam vDevInfo = 4;
bool CtrlRequest::has_vdevinfo() const {
  return params_case() == kVDevInfo;
}
void CtrlRequest::set_has_vdevinfo() {
  _oneof_case_[0] = kVDevInfo;
}
void CtrlRequest::clear_vdevinfo() {
  if (has_vdevinfo()) {
    delete params_.vdevinfo_;
    clear_has_params();
  }
}
 const ::nba::knapp::CtrlRequest_vDeviceInfoParam& CtrlRequest::vdevinfo() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.vDevInfo)
  return has_vdevinfo()
      ? *params_.vdevinfo_
      : ::nba::knapp::CtrlRequest_vDeviceInfoParam::default_instance();
}
::nba::knapp::CtrlRequest_vDeviceInfoParam* CtrlRequest::mutable_vdevinfo() {
  if (!has_vdevinfo()) {
    clear_params();
    set_has_vdevinfo();
    params_.vdevinfo_ = new ::nba::knapp::CtrlRequest_vDeviceInfoParam;
  }
  // @@protoc_insertion_point(field_mutable:nba.knapp.CtrlRequest.vDevInfo)
  return params_.vdevinfo_;
}
::nba::knapp::CtrlRequest_vDeviceInfoParam* CtrlRequest::release_vdevinfo() {
  // @@protoc_insertion_point(field_release:nba.knapp.CtrlRequest.vDevInfo)
  if (has_vdevinfo()) {
    clear_has_params();
    ::nba::knapp::CtrlRequest_vDeviceInfoParam* temp = params_.vdevinfo_;
    params_.vdevinfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CtrlRequest::set_allocated_vdevinfo(::nba::knapp::CtrlRequest_vDeviceInfoParam* vdevinfo) {
  clear_params();
  if (vdevinfo) {
    set_has_vdevinfo();
    params_.vdevinfo_ = vdevinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:nba.knapp.CtrlRequest.vDevInfo)
}

// optional .nba.knapp.CtrlRequest.ResourceParam resource = 5;
bool CtrlRequest::has_resource() const {
  return params_case() == kResource;
}
void CtrlRequest::set_has_resource() {
  _oneof_case_[0] = kResource;
}
void CtrlRequest::clear_resource() {
  if (has_resource()) {
    delete params_.resource_;
    clear_has_params();
  }
}
 const ::nba::knapp::CtrlRequest_ResourceParam& CtrlRequest::resource() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.resource)
  return has_resource()
      ? *params_.resource_
      : ::nba::knapp::CtrlRequest_ResourceParam::default_instance();
}
::nba::knapp::CtrlRequest_ResourceParam* CtrlRequest::mutable_resource() {
  if (!has_resource()) {
    clear_params();
    set_has_resource();
    params_.resource_ = new ::nba::knapp::CtrlRequest_ResourceParam;
  }
  // @@protoc_insertion_point(field_mutable:nba.knapp.CtrlRequest.resource)
  return params_.resource_;
}
::nba::knapp::CtrlRequest_ResourceParam* CtrlRequest::release_resource() {
  // @@protoc_insertion_point(field_release:nba.knapp.CtrlRequest.resource)
  if (has_resource()) {
    clear_has_params();
    ::nba::knapp::CtrlRequest_ResourceParam* temp = params_.resource_;
    params_.resource_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CtrlRequest::set_allocated_resource(::nba::knapp::CtrlRequest_ResourceParam* resource) {
  clear_params();
  if (resource) {
    set_has_resource();
    params_.resource_ = resource;
  }
  // @@protoc_insertion_point(field_set_allocated:nba.knapp.CtrlRequest.resource)
}

bool CtrlRequest::has_params() const {
  return params_case() != PARAMS_NOT_SET;
}
void CtrlRequest::clear_has_params() {
  _oneof_case_[0] = PARAMS_NOT_SET;
}
CtrlRequest::ParamsCase CtrlRequest::params_case() const {
  return CtrlRequest::ParamsCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CtrlResponse_Reply_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlResponse_Reply_descriptor_;
}
bool CtrlResponse_Reply_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CtrlResponse_Reply CtrlResponse::SUCCESS;
const CtrlResponse_Reply CtrlResponse::FAILURE;
const CtrlResponse_Reply CtrlResponse::INVALID;
const CtrlResponse_Reply CtrlResponse::Reply_MIN;
const CtrlResponse_Reply CtrlResponse::Reply_MAX;
const int CtrlResponse::Reply_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlResponse_TextResponse::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlResponse_TextResponse::CtrlResponse_TextResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nba.knapp.CtrlResponse.TextResponse)
}

void CtrlResponse_TextResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CtrlResponse_TextResponse::CtrlResponse_TextResponse(const CtrlResponse_TextResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nba.knapp.CtrlResponse.TextResponse)
}

void CtrlResponse_TextResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CtrlResponse_TextResponse::~CtrlResponse_TextResponse() {
  // @@protoc_insertion_point(destructor:nba.knapp.CtrlResponse.TextResponse)
  SharedDtor();
}

void CtrlResponse_TextResponse::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CtrlResponse_TextResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlResponse_TextResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlResponse_TextResponse_descriptor_;
}

const CtrlResponse_TextResponse& CtrlResponse_TextResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();
  return *default_instance_;
}

CtrlResponse_TextResponse* CtrlResponse_TextResponse::default_instance_ = NULL;

CtrlResponse_TextResponse* CtrlResponse_TextResponse::New(::google::protobuf::Arena* arena) const {
  CtrlResponse_TextResponse* n = new CtrlResponse_TextResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlResponse_TextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nba.knapp.CtrlResponse.TextResponse)
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CtrlResponse_TextResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nba.knapp.CtrlResponse.TextResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nba.knapp.CtrlResponse.TextResponse.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nba.knapp.CtrlResponse.TextResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nba.knapp.CtrlResponse.TextResponse)
  return false;
#undef DO_
}

void CtrlResponse_TextResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nba.knapp.CtrlResponse.TextResponse)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nba.knapp.CtrlResponse.TextResponse.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:nba.knapp.CtrlResponse.TextResponse)
}

::google::protobuf::uint8* CtrlResponse_TextResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nba.knapp.CtrlResponse.TextResponse)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nba.knapp.CtrlResponse.TextResponse.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nba.knapp.CtrlResponse.TextResponse)
  return target;
}

int CtrlResponse_TextResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nba.knapp.CtrlResponse.TextResponse)
  int total_size = 0;

  // optional string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlResponse_TextResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nba.knapp.CtrlResponse.TextResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CtrlResponse_TextResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlResponse_TextResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nba.knapp.CtrlResponse.TextResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nba.knapp.CtrlResponse.TextResponse)
    MergeFrom(*source);
  }
}

void CtrlResponse_TextResponse::MergeFrom(const CtrlResponse_TextResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nba.knapp.CtrlResponse.TextResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void CtrlResponse_TextResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nba.knapp.CtrlResponse.TextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlResponse_TextResponse::CopyFrom(const CtrlResponse_TextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nba.knapp.CtrlResponse.TextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlResponse_TextResponse::IsInitialized() const {

  return true;
}

void CtrlResponse_TextResponse::Swap(CtrlResponse_TextResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlResponse_TextResponse::InternalSwap(CtrlResponse_TextResponse* other) {
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlResponse_TextResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlResponse_TextResponse_descriptor_;
  metadata.reflection = CtrlResponse_TextResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlResponse_ResourceResponse::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlResponse_ResourceResponse::CtrlResponse_ResourceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nba.knapp.CtrlResponse.ResourceResponse)
}

void CtrlResponse_ResourceResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CtrlResponse_ResourceResponse::CtrlResponse_ResourceResponse(const CtrlResponse_ResourceResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nba.knapp.CtrlResponse.ResourceResponse)
}

void CtrlResponse_ResourceResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  handle_ = GOOGLE_ULONGLONG(0);
}

CtrlResponse_ResourceResponse::~CtrlResponse_ResourceResponse() {
  // @@protoc_insertion_point(destructor:nba.knapp.CtrlResponse.ResourceResponse)
  SharedDtor();
}

void CtrlResponse_ResourceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CtrlResponse_ResourceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlResponse_ResourceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlResponse_ResourceResponse_descriptor_;
}

const CtrlResponse_ResourceResponse& CtrlResponse_ResourceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();
  return *default_instance_;
}

CtrlResponse_ResourceResponse* CtrlResponse_ResourceResponse::default_instance_ = NULL;

CtrlResponse_ResourceResponse* CtrlResponse_ResourceResponse::New(::google::protobuf::Arena* arena) const {
  CtrlResponse_ResourceResponse* n = new CtrlResponse_ResourceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlResponse_ResourceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nba.knapp.CtrlResponse.ResourceResponse)
  handle_ = GOOGLE_ULONGLONG(0);
}

bool CtrlResponse_ResourceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nba.knapp.CtrlResponse.ResourceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nba.knapp.CtrlResponse.ResourceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nba.knapp.CtrlResponse.ResourceResponse)
  return false;
#undef DO_
}

void CtrlResponse_ResourceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nba.knapp.CtrlResponse.ResourceResponse)
  // optional uint64 handle = 1;
  if (this->handle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:nba.knapp.CtrlResponse.ResourceResponse)
}

::google::protobuf::uint8* CtrlResponse_ResourceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nba.knapp.CtrlResponse.ResourceResponse)
  // optional uint64 handle = 1;
  if (this->handle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nba.knapp.CtrlResponse.ResourceResponse)
  return target;
}

int CtrlResponse_ResourceResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nba.knapp.CtrlResponse.ResourceResponse)
  int total_size = 0;

  // optional uint64 handle = 1;
  if (this->handle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->handle());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlResponse_ResourceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nba.knapp.CtrlResponse.ResourceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CtrlResponse_ResourceResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlResponse_ResourceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nba.knapp.CtrlResponse.ResourceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nba.knapp.CtrlResponse.ResourceResponse)
    MergeFrom(*source);
  }
}

void CtrlResponse_ResourceResponse::MergeFrom(const CtrlResponse_ResourceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nba.knapp.CtrlResponse.ResourceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.handle() != 0) {
    set_handle(from.handle());
  }
}

void CtrlResponse_ResourceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nba.knapp.CtrlResponse.ResourceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlResponse_ResourceResponse::CopyFrom(const CtrlResponse_ResourceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nba.knapp.CtrlResponse.ResourceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlResponse_ResourceResponse::IsInitialized() const {

  return true;
}

void CtrlResponse_ResourceResponse::Swap(CtrlResponse_ResourceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlResponse_ResourceResponse::InternalSwap(CtrlResponse_ResourceResponse* other) {
  std::swap(handle_, other->handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlResponse_ResourceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlResponse_ResourceResponse_descriptor_;
  metadata.reflection = CtrlResponse_ResourceResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlResponse::kReplyFieldNumber;
const int CtrlResponse::kTextFieldNumber;
const int CtrlResponse::kResourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlResponse::CtrlResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nba.knapp.CtrlResponse)
}

void CtrlResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  CtrlResponse_default_oneof_instance_->text_ = const_cast< ::nba::knapp::CtrlResponse_TextResponse*>(&::nba::knapp::CtrlResponse_TextResponse::default_instance());
  CtrlResponse_default_oneof_instance_->resource_ = const_cast< ::nba::knapp::CtrlResponse_ResourceResponse*>(&::nba::knapp::CtrlResponse_ResourceResponse::default_instance());
}

CtrlResponse::CtrlResponse(const CtrlResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nba.knapp.CtrlResponse)
}

void CtrlResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  reply_ = 0;
  clear_has_data();
}

CtrlResponse::~CtrlResponse() {
  // @@protoc_insertion_point(destructor:nba.knapp.CtrlResponse)
  SharedDtor();
}

void CtrlResponse::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
  if (this != default_instance_) {
  }
}

void CtrlResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlResponse_descriptor_;
}

const CtrlResponse& CtrlResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();
  return *default_instance_;
}

CtrlResponse* CtrlResponse::default_instance_ = NULL;

CtrlResponse* CtrlResponse::New(::google::protobuf::Arena* arena) const {
  CtrlResponse* n = new CtrlResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlResponse::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:nba.knapp.CtrlResponse)
  switch(data_case()) {
    case kText: {
      delete data_.text_;
      break;
    }
    case kResource: {
      delete data_.resource_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void CtrlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nba.knapp.CtrlResponse)
  reply_ = 0;
  clear_data();
}

bool CtrlResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nba.knapp.CtrlResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .nba.knapp.CtrlResponse.Reply reply = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reply(static_cast< ::nba::knapp::CtrlResponse_Reply >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional .nba.knapp.CtrlResponse.TextResponse text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resource;
        break;
      }

      // optional .nba.knapp.CtrlResponse.ResourceResponse resource = 3;
      case 3: {
        if (tag == 26) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nba.knapp.CtrlResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nba.knapp.CtrlResponse)
  return false;
#undef DO_
}

void CtrlResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nba.knapp.CtrlResponse)
  // optional .nba.knapp.CtrlResponse.Reply reply = 1;
  if (this->reply() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reply(), output);
  }

  // optional .nba.knapp.CtrlResponse.TextResponse text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *data_.text_, output);
  }

  // optional .nba.knapp.CtrlResponse.ResourceResponse resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *data_.resource_, output);
  }

  // @@protoc_insertion_point(serialize_end:nba.knapp.CtrlResponse)
}

::google::protobuf::uint8* CtrlResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nba.knapp.CtrlResponse)
  // optional .nba.knapp.CtrlResponse.Reply reply = 1;
  if (this->reply() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reply(), target);
  }

  // optional .nba.knapp.CtrlResponse.TextResponse text = 2;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *data_.text_, target);
  }

  // optional .nba.knapp.CtrlResponse.ResourceResponse resource = 3;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *data_.resource_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nba.knapp.CtrlResponse)
  return target;
}

int CtrlResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nba.knapp.CtrlResponse)
  int total_size = 0;

  // optional .nba.knapp.CtrlResponse.Reply reply = 1;
  if (this->reply() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reply());
  }

  switch (data_case()) {
    // optional .nba.knapp.CtrlResponse.TextResponse text = 2;
    case kText: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.text_);
      break;
    }
    // optional .nba.knapp.CtrlResponse.ResourceResponse resource = 3;
    case kResource: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.resource_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nba.knapp.CtrlResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CtrlResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nba.knapp.CtrlResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nba.knapp.CtrlResponse)
    MergeFrom(*source);
  }
}

void CtrlResponse::MergeFrom(const CtrlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nba.knapp.CtrlResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.data_case()) {
    case kText: {
      mutable_text()->::nba::knapp::CtrlResponse_TextResponse::MergeFrom(from.text());
      break;
    }
    case kResource: {
      mutable_resource()->::nba::knapp::CtrlResponse_ResourceResponse::MergeFrom(from.resource());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (from.reply() != 0) {
    set_reply(from.reply());
  }
}

void CtrlResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nba.knapp.CtrlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlResponse::CopyFrom(const CtrlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nba.knapp.CtrlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlResponse::IsInitialized() const {

  return true;
}

void CtrlResponse::Swap(CtrlResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlResponse::InternalSwap(CtrlResponse* other) {
  std::swap(reply_, other->reply_);
  std::swap(data_, other->data_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlResponse_descriptor_;
  metadata.reflection = CtrlResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlResponse_TextResponse

// optional string msg = 1;
void CtrlResponse_TextResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CtrlResponse_TextResponse::msg() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlResponse.TextResponse.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlResponse_TextResponse::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlResponse.TextResponse.msg)
}
 void CtrlResponse_TextResponse::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nba.knapp.CtrlResponse.TextResponse.msg)
}
 void CtrlResponse_TextResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nba.knapp.CtrlResponse.TextResponse.msg)
}
 ::std::string* CtrlResponse_TextResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:nba.knapp.CtrlResponse.TextResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CtrlResponse_TextResponse::release_msg() {
  // @@protoc_insertion_point(field_release:nba.knapp.CtrlResponse.TextResponse.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlResponse_TextResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:nba.knapp.CtrlResponse.TextResponse.msg)
}

// -------------------------------------------------------------------

// CtrlResponse_ResourceResponse

// optional uint64 handle = 1;
void CtrlResponse_ResourceResponse::clear_handle() {
  handle_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 CtrlResponse_ResourceResponse::handle() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlResponse.ResourceResponse.handle)
  return handle_;
}
 void CtrlResponse_ResourceResponse::set_handle(::google::protobuf::uint64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlResponse.ResourceResponse.handle)
}

// -------------------------------------------------------------------

// CtrlResponse

// optional .nba.knapp.CtrlResponse.Reply reply = 1;
void CtrlResponse::clear_reply() {
  reply_ = 0;
}
 ::nba::knapp::CtrlResponse_Reply CtrlResponse::reply() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlResponse.reply)
  return static_cast< ::nba::knapp::CtrlResponse_Reply >(reply_);
}
 void CtrlResponse::set_reply(::nba::knapp::CtrlResponse_Reply value) {
  
  reply_ = value;
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlResponse.reply)
}

// optional .nba.knapp.CtrlResponse.TextResponse text = 2;
bool CtrlResponse::has_text() const {
  return data_case() == kText;
}
void CtrlResponse::set_has_text() {
  _oneof_case_[0] = kText;
}
void CtrlResponse::clear_text() {
  if (has_text()) {
    delete data_.text_;
    clear_has_data();
  }
}
 const ::nba::knapp::CtrlResponse_TextResponse& CtrlResponse::text() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlResponse.text)
  return has_text()
      ? *data_.text_
      : ::nba::knapp::CtrlResponse_TextResponse::default_instance();
}
::nba::knapp::CtrlResponse_TextResponse* CtrlResponse::mutable_text() {
  if (!has_text()) {
    clear_data();
    set_has_text();
    data_.text_ = new ::nba::knapp::CtrlResponse_TextResponse;
  }
  // @@protoc_insertion_point(field_mutable:nba.knapp.CtrlResponse.text)
  return data_.text_;
}
::nba::knapp::CtrlResponse_TextResponse* CtrlResponse::release_text() {
  // @@protoc_insertion_point(field_release:nba.knapp.CtrlResponse.text)
  if (has_text()) {
    clear_has_data();
    ::nba::knapp::CtrlResponse_TextResponse* temp = data_.text_;
    data_.text_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CtrlResponse::set_allocated_text(::nba::knapp::CtrlResponse_TextResponse* text) {
  clear_data();
  if (text) {
    set_has_text();
    data_.text_ = text;
  }
  // @@protoc_insertion_point(field_set_allocated:nba.knapp.CtrlResponse.text)
}

// optional .nba.knapp.CtrlResponse.ResourceResponse resource = 3;
bool CtrlResponse::has_resource() const {
  return data_case() == kResource;
}
void CtrlResponse::set_has_resource() {
  _oneof_case_[0] = kResource;
}
void CtrlResponse::clear_resource() {
  if (has_resource()) {
    delete data_.resource_;
    clear_has_data();
  }
}
 const ::nba::knapp::CtrlResponse_ResourceResponse& CtrlResponse::resource() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlResponse.resource)
  return has_resource()
      ? *data_.resource_
      : ::nba::knapp::CtrlResponse_ResourceResponse::default_instance();
}
::nba::knapp::CtrlResponse_ResourceResponse* CtrlResponse::mutable_resource() {
  if (!has_resource()) {
    clear_data();
    set_has_resource();
    data_.resource_ = new ::nba::knapp::CtrlResponse_ResourceResponse;
  }
  // @@protoc_insertion_point(field_mutable:nba.knapp.CtrlResponse.resource)
  return data_.resource_;
}
::nba::knapp::CtrlResponse_ResourceResponse* CtrlResponse::release_resource() {
  // @@protoc_insertion_point(field_release:nba.knapp.CtrlResponse.resource)
  if (has_resource()) {
    clear_has_data();
    ::nba::knapp::CtrlResponse_ResourceResponse* temp = data_.resource_;
    data_.resource_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CtrlResponse::set_allocated_resource(::nba::knapp::CtrlResponse_ResourceResponse* resource) {
  clear_data();
  if (resource) {
    set_has_resource();
    data_.resource_ = resource;
  }
  // @@protoc_insertion_point(field_set_allocated:nba.knapp.CtrlResponse.resource)
}

bool CtrlResponse::has_data() const {
  return data_case() != DATA_NOT_SET;
}
void CtrlResponse::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
CtrlResponse::DataCase CtrlResponse::data_case() const {
  return CtrlResponse::DataCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace knapp
}  // namespace nba

// @@protoc_insertion_point(global_scope)
