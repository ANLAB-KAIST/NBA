// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctrl.proto

#ifndef PROTOBUF_ctrl_2eproto__INCLUDED
#define PROTOBUF_ctrl_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace nba {
namespace knapp {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ctrl_2eproto();
void protobuf_AssignDesc_ctrl_2eproto();
void protobuf_ShutdownFile_ctrl_2eproto();

class CtrlRequest;
class CtrlRequest_CreateVdevParam;
class CtrlRequest_MallocParam;
class CtrlRequest_PingParam;
class CtrlRequest_VdevRefParam;
class CtrlResponse;
class CtrlResponse_ResourceResponse;
class CtrlResponse_TextResponse;

enum CtrlRequest_Type {
  CtrlRequest_Type_PING = 0,
  CtrlRequest_Type_MALLOC = 1,
  CtrlRequest_Type_FREE = 2,
  CtrlRequest_Type_CREATE_VDEV = 3,
  CtrlRequest_Type_DESTROY_VDEV = 4,
  CtrlRequest_Type_CtrlRequest_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CtrlRequest_Type_CtrlRequest_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CtrlRequest_Type_IsValid(int value);
const CtrlRequest_Type CtrlRequest_Type_Type_MIN = CtrlRequest_Type_PING;
const CtrlRequest_Type CtrlRequest_Type_Type_MAX = CtrlRequest_Type_DESTROY_VDEV;
const int CtrlRequest_Type_Type_ARRAYSIZE = CtrlRequest_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* CtrlRequest_Type_descriptor();
inline const ::std::string& CtrlRequest_Type_Name(CtrlRequest_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    CtrlRequest_Type_descriptor(), value);
}
inline bool CtrlRequest_Type_Parse(
    const ::std::string& name, CtrlRequest_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CtrlRequest_Type>(
    CtrlRequest_Type_descriptor(), name, value);
}
enum CtrlResponse_Reply {
  CtrlResponse_Reply_SUCCESS = 0,
  CtrlResponse_Reply_FAILURE = 1,
  CtrlResponse_Reply_CtrlResponse_Reply_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CtrlResponse_Reply_CtrlResponse_Reply_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CtrlResponse_Reply_IsValid(int value);
const CtrlResponse_Reply CtrlResponse_Reply_Reply_MIN = CtrlResponse_Reply_SUCCESS;
const CtrlResponse_Reply CtrlResponse_Reply_Reply_MAX = CtrlResponse_Reply_FAILURE;
const int CtrlResponse_Reply_Reply_ARRAYSIZE = CtrlResponse_Reply_Reply_MAX + 1;

const ::google::protobuf::EnumDescriptor* CtrlResponse_Reply_descriptor();
inline const ::std::string& CtrlResponse_Reply_Name(CtrlResponse_Reply value) {
  return ::google::protobuf::internal::NameOfEnum(
    CtrlResponse_Reply_descriptor(), value);
}
inline bool CtrlResponse_Reply_Parse(
    const ::std::string& name, CtrlResponse_Reply* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CtrlResponse_Reply>(
    CtrlResponse_Reply_descriptor(), name, value);
}
// ===================================================================

class CtrlRequest_PingParam : public ::google::protobuf::Message {
 public:
  CtrlRequest_PingParam();
  virtual ~CtrlRequest_PingParam();

  CtrlRequest_PingParam(const CtrlRequest_PingParam& from);

  inline CtrlRequest_PingParam& operator=(const CtrlRequest_PingParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlRequest_PingParam& default_instance();

  void Swap(CtrlRequest_PingParam* other);

  // implements Message ----------------------------------------------

  inline CtrlRequest_PingParam* New() const { return New(NULL); }

  CtrlRequest_PingParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlRequest_PingParam& from);
  void MergeFrom(const CtrlRequest_PingParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CtrlRequest_PingParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:nba.knapp.CtrlRequest.PingParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ctrl_2eproto();
  friend void protobuf_AssignDesc_ctrl_2eproto();
  friend void protobuf_ShutdownFile_ctrl_2eproto();

  void InitAsDefaultInstance();
  static CtrlRequest_PingParam* default_instance_;
};
// -------------------------------------------------------------------

class CtrlRequest_MallocParam : public ::google::protobuf::Message {
 public:
  CtrlRequest_MallocParam();
  virtual ~CtrlRequest_MallocParam();

  CtrlRequest_MallocParam(const CtrlRequest_MallocParam& from);

  inline CtrlRequest_MallocParam& operator=(const CtrlRequest_MallocParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlRequest_MallocParam& default_instance();

  void Swap(CtrlRequest_MallocParam* other);

  // implements Message ----------------------------------------------

  inline CtrlRequest_MallocParam* New() const { return New(NULL); }

  CtrlRequest_MallocParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlRequest_MallocParam& from);
  void MergeFrom(const CtrlRequest_MallocParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CtrlRequest_MallocParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 size = 1;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // optional uint64 align = 2;
  void clear_align();
  static const int kAlignFieldNumber = 2;
  ::google::protobuf::uint64 align() const;
  void set_align(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:nba.knapp.CtrlRequest.MallocParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint64 align_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ctrl_2eproto();
  friend void protobuf_AssignDesc_ctrl_2eproto();
  friend void protobuf_ShutdownFile_ctrl_2eproto();

  void InitAsDefaultInstance();
  static CtrlRequest_MallocParam* default_instance_;
};
// -------------------------------------------------------------------

class CtrlRequest_CreateVdevParam : public ::google::protobuf::Message {
 public:
  CtrlRequest_CreateVdevParam();
  virtual ~CtrlRequest_CreateVdevParam();

  CtrlRequest_CreateVdevParam(const CtrlRequest_CreateVdevParam& from);

  inline CtrlRequest_CreateVdevParam& operator=(const CtrlRequest_CreateVdevParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlRequest_CreateVdevParam& default_instance();

  void Swap(CtrlRequest_CreateVdevParam* other);

  // implements Message ----------------------------------------------

  inline CtrlRequest_CreateVdevParam* New() const { return New(NULL); }

  CtrlRequest_CreateVdevParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlRequest_CreateVdevParam& from);
  void MergeFrom(const CtrlRequest_CreateVdevParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CtrlRequest_CreateVdevParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_pcores = 1;
  void clear_num_pcores();
  static const int kNumPcoresFieldNumber = 1;
  ::google::protobuf::uint32 num_pcores() const;
  void set_num_pcores(::google::protobuf::uint32 value);

  // optional uint32 num_lcores_per_pcore = 2;
  void clear_num_lcores_per_pcore();
  static const int kNumLcoresPerPcoreFieldNumber = 2;
  ::google::protobuf::uint32 num_lcores_per_pcore() const;
  void set_num_lcores_per_pcore(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:nba.knapp.CtrlRequest.CreateVdevParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 num_pcores_;
  ::google::protobuf::uint32 num_lcores_per_pcore_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ctrl_2eproto();
  friend void protobuf_AssignDesc_ctrl_2eproto();
  friend void protobuf_ShutdownFile_ctrl_2eproto();

  void InitAsDefaultInstance();
  static CtrlRequest_CreateVdevParam* default_instance_;
};
// -------------------------------------------------------------------

class CtrlRequest_VdevRefParam : public ::google::protobuf::Message {
 public:
  CtrlRequest_VdevRefParam();
  virtual ~CtrlRequest_VdevRefParam();

  CtrlRequest_VdevRefParam(const CtrlRequest_VdevRefParam& from);

  inline CtrlRequest_VdevRefParam& operator=(const CtrlRequest_VdevRefParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlRequest_VdevRefParam& default_instance();

  void Swap(CtrlRequest_VdevRefParam* other);

  // implements Message ----------------------------------------------

  inline CtrlRequest_VdevRefParam* New() const { return New(NULL); }

  CtrlRequest_VdevRefParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlRequest_VdevRefParam& from);
  void MergeFrom(const CtrlRequest_VdevRefParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CtrlRequest_VdevRefParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 vdev_id = 1;
  void clear_vdev_id();
  static const int kVdevIdFieldNumber = 1;
  ::google::protobuf::uint64 vdev_id() const;
  void set_vdev_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:nba.knapp.CtrlRequest.VdevRefParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 vdev_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ctrl_2eproto();
  friend void protobuf_AssignDesc_ctrl_2eproto();
  friend void protobuf_ShutdownFile_ctrl_2eproto();

  void InitAsDefaultInstance();
  static CtrlRequest_VdevRefParam* default_instance_;
};
// -------------------------------------------------------------------

class CtrlRequest : public ::google::protobuf::Message {
 public:
  CtrlRequest();
  virtual ~CtrlRequest();

  CtrlRequest(const CtrlRequest& from);

  inline CtrlRequest& operator=(const CtrlRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlRequest& default_instance();

  enum ParamsCase {
    kPingParam = 2,
    kMallocParam = 3,
    kCreateVdevParam = 4,
    kVdevRef = 5,
    PARAMS_NOT_SET = 0,
  };

  void Swap(CtrlRequest* other);

  // implements Message ----------------------------------------------

  inline CtrlRequest* New() const { return New(NULL); }

  CtrlRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlRequest& from);
  void MergeFrom(const CtrlRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CtrlRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CtrlRequest_PingParam PingParam;
  typedef CtrlRequest_MallocParam MallocParam;
  typedef CtrlRequest_CreateVdevParam CreateVdevParam;
  typedef CtrlRequest_VdevRefParam VdevRefParam;

  typedef CtrlRequest_Type Type;
  static const Type PING =
    CtrlRequest_Type_PING;
  static const Type MALLOC =
    CtrlRequest_Type_MALLOC;
  static const Type FREE =
    CtrlRequest_Type_FREE;
  static const Type CREATE_VDEV =
    CtrlRequest_Type_CREATE_VDEV;
  static const Type DESTROY_VDEV =
    CtrlRequest_Type_DESTROY_VDEV;
  static inline bool Type_IsValid(int value) {
    return CtrlRequest_Type_IsValid(value);
  }
  static const Type Type_MIN =
    CtrlRequest_Type_Type_MIN;
  static const Type Type_MAX =
    CtrlRequest_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    CtrlRequest_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return CtrlRequest_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return CtrlRequest_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return CtrlRequest_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .nba.knapp.CtrlRequest.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::nba::knapp::CtrlRequest_Type type() const;
  void set_type(::nba::knapp::CtrlRequest_Type value);

  // optional .nba.knapp.CtrlRequest.PingParam ping_param = 2;
  bool has_ping_param() const;
  void clear_ping_param();
  static const int kPingParamFieldNumber = 2;
  const ::nba::knapp::CtrlRequest_PingParam& ping_param() const;
  ::nba::knapp::CtrlRequest_PingParam* mutable_ping_param();
  ::nba::knapp::CtrlRequest_PingParam* release_ping_param();
  void set_allocated_ping_param(::nba::knapp::CtrlRequest_PingParam* ping_param);

  // optional .nba.knapp.CtrlRequest.MallocParam malloc_param = 3;
  bool has_malloc_param() const;
  void clear_malloc_param();
  static const int kMallocParamFieldNumber = 3;
  const ::nba::knapp::CtrlRequest_MallocParam& malloc_param() const;
  ::nba::knapp::CtrlRequest_MallocParam* mutable_malloc_param();
  ::nba::knapp::CtrlRequest_MallocParam* release_malloc_param();
  void set_allocated_malloc_param(::nba::knapp::CtrlRequest_MallocParam* malloc_param);

  // optional .nba.knapp.CtrlRequest.CreateVdevParam create_vdev_param = 4;
  bool has_create_vdev_param() const;
  void clear_create_vdev_param();
  static const int kCreateVdevParamFieldNumber = 4;
  const ::nba::knapp::CtrlRequest_CreateVdevParam& create_vdev_param() const;
  ::nba::knapp::CtrlRequest_CreateVdevParam* mutable_create_vdev_param();
  ::nba::knapp::CtrlRequest_CreateVdevParam* release_create_vdev_param();
  void set_allocated_create_vdev_param(::nba::knapp::CtrlRequest_CreateVdevParam* create_vdev_param);

  // optional .nba.knapp.CtrlRequest.VdevRefParam vdev_ref = 5;
  bool has_vdev_ref() const;
  void clear_vdev_ref();
  static const int kVdevRefFieldNumber = 5;
  const ::nba::knapp::CtrlRequest_VdevRefParam& vdev_ref() const;
  ::nba::knapp::CtrlRequest_VdevRefParam* mutable_vdev_ref();
  ::nba::knapp::CtrlRequest_VdevRefParam* release_vdev_ref();
  void set_allocated_vdev_ref(::nba::knapp::CtrlRequest_VdevRefParam* vdev_ref);

  ParamsCase params_case() const;
  // @@protoc_insertion_point(class_scope:nba.knapp.CtrlRequest)
 private:
  inline void set_has_ping_param();
  inline void set_has_malloc_param();
  inline void set_has_create_vdev_param();
  inline void set_has_vdev_ref();

  inline bool has_params() const;
  void clear_params();
  inline void clear_has_params();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int type_;
  union ParamsUnion {
    ParamsUnion() {}
    ::nba::knapp::CtrlRequest_PingParam* ping_param_;
    ::nba::knapp::CtrlRequest_MallocParam* malloc_param_;
    ::nba::knapp::CtrlRequest_CreateVdevParam* create_vdev_param_;
    ::nba::knapp::CtrlRequest_VdevRefParam* vdev_ref_;
  } params_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_ctrl_2eproto();
  friend void protobuf_AssignDesc_ctrl_2eproto();
  friend void protobuf_ShutdownFile_ctrl_2eproto();

  void InitAsDefaultInstance();
  static CtrlRequest* default_instance_;
};
// -------------------------------------------------------------------

class CtrlResponse_TextResponse : public ::google::protobuf::Message {
 public:
  CtrlResponse_TextResponse();
  virtual ~CtrlResponse_TextResponse();

  CtrlResponse_TextResponse(const CtrlResponse_TextResponse& from);

  inline CtrlResponse_TextResponse& operator=(const CtrlResponse_TextResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlResponse_TextResponse& default_instance();

  void Swap(CtrlResponse_TextResponse* other);

  // implements Message ----------------------------------------------

  inline CtrlResponse_TextResponse* New() const { return New(NULL); }

  CtrlResponse_TextResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlResponse_TextResponse& from);
  void MergeFrom(const CtrlResponse_TextResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CtrlResponse_TextResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:nba.knapp.CtrlResponse.TextResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ctrl_2eproto();
  friend void protobuf_AssignDesc_ctrl_2eproto();
  friend void protobuf_ShutdownFile_ctrl_2eproto();

  void InitAsDefaultInstance();
  static CtrlResponse_TextResponse* default_instance_;
};
// -------------------------------------------------------------------

class CtrlResponse_ResourceResponse : public ::google::protobuf::Message {
 public:
  CtrlResponse_ResourceResponse();
  virtual ~CtrlResponse_ResourceResponse();

  CtrlResponse_ResourceResponse(const CtrlResponse_ResourceResponse& from);

  inline CtrlResponse_ResourceResponse& operator=(const CtrlResponse_ResourceResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlResponse_ResourceResponse& default_instance();

  void Swap(CtrlResponse_ResourceResponse* other);

  // implements Message ----------------------------------------------

  inline CtrlResponse_ResourceResponse* New() const { return New(NULL); }

  CtrlResponse_ResourceResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlResponse_ResourceResponse& from);
  void MergeFrom(const CtrlResponse_ResourceResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CtrlResponse_ResourceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  ::google::protobuf::uint64 handle() const;
  void set_handle(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:nba.knapp.CtrlResponse.ResourceResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 handle_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ctrl_2eproto();
  friend void protobuf_AssignDesc_ctrl_2eproto();
  friend void protobuf_ShutdownFile_ctrl_2eproto();

  void InitAsDefaultInstance();
  static CtrlResponse_ResourceResponse* default_instance_;
};
// -------------------------------------------------------------------

class CtrlResponse : public ::google::protobuf::Message {
 public:
  CtrlResponse();
  virtual ~CtrlResponse();

  CtrlResponse(const CtrlResponse& from);

  inline CtrlResponse& operator=(const CtrlResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlResponse& default_instance();

  enum DataCase {
    kText = 2,
    kResource = 3,
    DATA_NOT_SET = 0,
  };

  void Swap(CtrlResponse* other);

  // implements Message ----------------------------------------------

  inline CtrlResponse* New() const { return New(NULL); }

  CtrlResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlResponse& from);
  void MergeFrom(const CtrlResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CtrlResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CtrlResponse_TextResponse TextResponse;
  typedef CtrlResponse_ResourceResponse ResourceResponse;

  typedef CtrlResponse_Reply Reply;
  static const Reply SUCCESS =
    CtrlResponse_Reply_SUCCESS;
  static const Reply FAILURE =
    CtrlResponse_Reply_FAILURE;
  static inline bool Reply_IsValid(int value) {
    return CtrlResponse_Reply_IsValid(value);
  }
  static const Reply Reply_MIN =
    CtrlResponse_Reply_Reply_MIN;
  static const Reply Reply_MAX =
    CtrlResponse_Reply_Reply_MAX;
  static const int Reply_ARRAYSIZE =
    CtrlResponse_Reply_Reply_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Reply_descriptor() {
    return CtrlResponse_Reply_descriptor();
  }
  static inline const ::std::string& Reply_Name(Reply value) {
    return CtrlResponse_Reply_Name(value);
  }
  static inline bool Reply_Parse(const ::std::string& name,
      Reply* value) {
    return CtrlResponse_Reply_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .nba.knapp.CtrlResponse.Reply reply = 1;
  void clear_reply();
  static const int kReplyFieldNumber = 1;
  ::nba::knapp::CtrlResponse_Reply reply() const;
  void set_reply(::nba::knapp::CtrlResponse_Reply value);

  // optional .nba.knapp.CtrlResponse.TextResponse text = 2;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::nba::knapp::CtrlResponse_TextResponse& text() const;
  ::nba::knapp::CtrlResponse_TextResponse* mutable_text();
  ::nba::knapp::CtrlResponse_TextResponse* release_text();
  void set_allocated_text(::nba::knapp::CtrlResponse_TextResponse* text);

  // optional .nba.knapp.CtrlResponse.ResourceResponse resource = 3;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 3;
  const ::nba::knapp::CtrlResponse_ResourceResponse& resource() const;
  ::nba::knapp::CtrlResponse_ResourceResponse* mutable_resource();
  ::nba::knapp::CtrlResponse_ResourceResponse* release_resource();
  void set_allocated_resource(::nba::knapp::CtrlResponse_ResourceResponse* resource);

  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:nba.knapp.CtrlResponse)
 private:
  inline void set_has_text();
  inline void set_has_resource();

  inline bool has_data() const;
  void clear_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int reply_;
  union DataUnion {
    DataUnion() {}
    ::nba::knapp::CtrlResponse_TextResponse* text_;
    ::nba::knapp::CtrlResponse_ResourceResponse* resource_;
  } data_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_ctrl_2eproto();
  friend void protobuf_AssignDesc_ctrl_2eproto();
  friend void protobuf_ShutdownFile_ctrl_2eproto();

  void InitAsDefaultInstance();
  static CtrlResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlRequest_PingParam

// optional string msg = 1;
inline void CtrlRequest_PingParam::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CtrlRequest_PingParam::msg() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.PingParam.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlRequest_PingParam::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlRequest.PingParam.msg)
}
inline void CtrlRequest_PingParam::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nba.knapp.CtrlRequest.PingParam.msg)
}
inline void CtrlRequest_PingParam::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nba.knapp.CtrlRequest.PingParam.msg)
}
inline ::std::string* CtrlRequest_PingParam::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:nba.knapp.CtrlRequest.PingParam.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtrlRequest_PingParam::release_msg() {
  // @@protoc_insertion_point(field_release:nba.knapp.CtrlRequest.PingParam.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlRequest_PingParam::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:nba.knapp.CtrlRequest.PingParam.msg)
}

// -------------------------------------------------------------------

// CtrlRequest_MallocParam

// optional uint64 size = 1;
inline void CtrlRequest_MallocParam::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CtrlRequest_MallocParam::size() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.MallocParam.size)
  return size_;
}
inline void CtrlRequest_MallocParam::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlRequest.MallocParam.size)
}

// optional uint64 align = 2;
inline void CtrlRequest_MallocParam::clear_align() {
  align_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CtrlRequest_MallocParam::align() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.MallocParam.align)
  return align_;
}
inline void CtrlRequest_MallocParam::set_align(::google::protobuf::uint64 value) {
  
  align_ = value;
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlRequest.MallocParam.align)
}

// -------------------------------------------------------------------

// CtrlRequest_CreateVdevParam

// optional uint32 num_pcores = 1;
inline void CtrlRequest_CreateVdevParam::clear_num_pcores() {
  num_pcores_ = 0u;
}
inline ::google::protobuf::uint32 CtrlRequest_CreateVdevParam::num_pcores() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.CreateVdevParam.num_pcores)
  return num_pcores_;
}
inline void CtrlRequest_CreateVdevParam::set_num_pcores(::google::protobuf::uint32 value) {
  
  num_pcores_ = value;
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlRequest.CreateVdevParam.num_pcores)
}

// optional uint32 num_lcores_per_pcore = 2;
inline void CtrlRequest_CreateVdevParam::clear_num_lcores_per_pcore() {
  num_lcores_per_pcore_ = 0u;
}
inline ::google::protobuf::uint32 CtrlRequest_CreateVdevParam::num_lcores_per_pcore() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.CreateVdevParam.num_lcores_per_pcore)
  return num_lcores_per_pcore_;
}
inline void CtrlRequest_CreateVdevParam::set_num_lcores_per_pcore(::google::protobuf::uint32 value) {
  
  num_lcores_per_pcore_ = value;
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlRequest.CreateVdevParam.num_lcores_per_pcore)
}

// -------------------------------------------------------------------

// CtrlRequest_VdevRefParam

// optional uint64 vdev_id = 1;
inline void CtrlRequest_VdevRefParam::clear_vdev_id() {
  vdev_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CtrlRequest_VdevRefParam::vdev_id() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.VdevRefParam.vdev_id)
  return vdev_id_;
}
inline void CtrlRequest_VdevRefParam::set_vdev_id(::google::protobuf::uint64 value) {
  
  vdev_id_ = value;
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlRequest.VdevRefParam.vdev_id)
}

// -------------------------------------------------------------------

// CtrlRequest

// optional .nba.knapp.CtrlRequest.Type type = 1;
inline void CtrlRequest::clear_type() {
  type_ = 0;
}
inline ::nba::knapp::CtrlRequest_Type CtrlRequest::type() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.type)
  return static_cast< ::nba::knapp::CtrlRequest_Type >(type_);
}
inline void CtrlRequest::set_type(::nba::knapp::CtrlRequest_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlRequest.type)
}

// optional .nba.knapp.CtrlRequest.PingParam ping_param = 2;
inline bool CtrlRequest::has_ping_param() const {
  return params_case() == kPingParam;
}
inline void CtrlRequest::set_has_ping_param() {
  _oneof_case_[0] = kPingParam;
}
inline void CtrlRequest::clear_ping_param() {
  if (has_ping_param()) {
    delete params_.ping_param_;
    clear_has_params();
  }
}
inline  const ::nba::knapp::CtrlRequest_PingParam& CtrlRequest::ping_param() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.ping_param)
  return has_ping_param()
      ? *params_.ping_param_
      : ::nba::knapp::CtrlRequest_PingParam::default_instance();
}
inline ::nba::knapp::CtrlRequest_PingParam* CtrlRequest::mutable_ping_param() {
  if (!has_ping_param()) {
    clear_params();
    set_has_ping_param();
    params_.ping_param_ = new ::nba::knapp::CtrlRequest_PingParam;
  }
  // @@protoc_insertion_point(field_mutable:nba.knapp.CtrlRequest.ping_param)
  return params_.ping_param_;
}
inline ::nba::knapp::CtrlRequest_PingParam* CtrlRequest::release_ping_param() {
  // @@protoc_insertion_point(field_release:nba.knapp.CtrlRequest.ping_param)
  if (has_ping_param()) {
    clear_has_params();
    ::nba::knapp::CtrlRequest_PingParam* temp = params_.ping_param_;
    params_.ping_param_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CtrlRequest::set_allocated_ping_param(::nba::knapp::CtrlRequest_PingParam* ping_param) {
  clear_params();
  if (ping_param) {
    set_has_ping_param();
    params_.ping_param_ = ping_param;
  }
  // @@protoc_insertion_point(field_set_allocated:nba.knapp.CtrlRequest.ping_param)
}

// optional .nba.knapp.CtrlRequest.MallocParam malloc_param = 3;
inline bool CtrlRequest::has_malloc_param() const {
  return params_case() == kMallocParam;
}
inline void CtrlRequest::set_has_malloc_param() {
  _oneof_case_[0] = kMallocParam;
}
inline void CtrlRequest::clear_malloc_param() {
  if (has_malloc_param()) {
    delete params_.malloc_param_;
    clear_has_params();
  }
}
inline  const ::nba::knapp::CtrlRequest_MallocParam& CtrlRequest::malloc_param() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.malloc_param)
  return has_malloc_param()
      ? *params_.malloc_param_
      : ::nba::knapp::CtrlRequest_MallocParam::default_instance();
}
inline ::nba::knapp::CtrlRequest_MallocParam* CtrlRequest::mutable_malloc_param() {
  if (!has_malloc_param()) {
    clear_params();
    set_has_malloc_param();
    params_.malloc_param_ = new ::nba::knapp::CtrlRequest_MallocParam;
  }
  // @@protoc_insertion_point(field_mutable:nba.knapp.CtrlRequest.malloc_param)
  return params_.malloc_param_;
}
inline ::nba::knapp::CtrlRequest_MallocParam* CtrlRequest::release_malloc_param() {
  // @@protoc_insertion_point(field_release:nba.knapp.CtrlRequest.malloc_param)
  if (has_malloc_param()) {
    clear_has_params();
    ::nba::knapp::CtrlRequest_MallocParam* temp = params_.malloc_param_;
    params_.malloc_param_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CtrlRequest::set_allocated_malloc_param(::nba::knapp::CtrlRequest_MallocParam* malloc_param) {
  clear_params();
  if (malloc_param) {
    set_has_malloc_param();
    params_.malloc_param_ = malloc_param;
  }
  // @@protoc_insertion_point(field_set_allocated:nba.knapp.CtrlRequest.malloc_param)
}

// optional .nba.knapp.CtrlRequest.CreateVdevParam create_vdev_param = 4;
inline bool CtrlRequest::has_create_vdev_param() const {
  return params_case() == kCreateVdevParam;
}
inline void CtrlRequest::set_has_create_vdev_param() {
  _oneof_case_[0] = kCreateVdevParam;
}
inline void CtrlRequest::clear_create_vdev_param() {
  if (has_create_vdev_param()) {
    delete params_.create_vdev_param_;
    clear_has_params();
  }
}
inline  const ::nba::knapp::CtrlRequest_CreateVdevParam& CtrlRequest::create_vdev_param() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.create_vdev_param)
  return has_create_vdev_param()
      ? *params_.create_vdev_param_
      : ::nba::knapp::CtrlRequest_CreateVdevParam::default_instance();
}
inline ::nba::knapp::CtrlRequest_CreateVdevParam* CtrlRequest::mutable_create_vdev_param() {
  if (!has_create_vdev_param()) {
    clear_params();
    set_has_create_vdev_param();
    params_.create_vdev_param_ = new ::nba::knapp::CtrlRequest_CreateVdevParam;
  }
  // @@protoc_insertion_point(field_mutable:nba.knapp.CtrlRequest.create_vdev_param)
  return params_.create_vdev_param_;
}
inline ::nba::knapp::CtrlRequest_CreateVdevParam* CtrlRequest::release_create_vdev_param() {
  // @@protoc_insertion_point(field_release:nba.knapp.CtrlRequest.create_vdev_param)
  if (has_create_vdev_param()) {
    clear_has_params();
    ::nba::knapp::CtrlRequest_CreateVdevParam* temp = params_.create_vdev_param_;
    params_.create_vdev_param_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CtrlRequest::set_allocated_create_vdev_param(::nba::knapp::CtrlRequest_CreateVdevParam* create_vdev_param) {
  clear_params();
  if (create_vdev_param) {
    set_has_create_vdev_param();
    params_.create_vdev_param_ = create_vdev_param;
  }
  // @@protoc_insertion_point(field_set_allocated:nba.knapp.CtrlRequest.create_vdev_param)
}

// optional .nba.knapp.CtrlRequest.VdevRefParam vdev_ref = 5;
inline bool CtrlRequest::has_vdev_ref() const {
  return params_case() == kVdevRef;
}
inline void CtrlRequest::set_has_vdev_ref() {
  _oneof_case_[0] = kVdevRef;
}
inline void CtrlRequest::clear_vdev_ref() {
  if (has_vdev_ref()) {
    delete params_.vdev_ref_;
    clear_has_params();
  }
}
inline  const ::nba::knapp::CtrlRequest_VdevRefParam& CtrlRequest::vdev_ref() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlRequest.vdev_ref)
  return has_vdev_ref()
      ? *params_.vdev_ref_
      : ::nba::knapp::CtrlRequest_VdevRefParam::default_instance();
}
inline ::nba::knapp::CtrlRequest_VdevRefParam* CtrlRequest::mutable_vdev_ref() {
  if (!has_vdev_ref()) {
    clear_params();
    set_has_vdev_ref();
    params_.vdev_ref_ = new ::nba::knapp::CtrlRequest_VdevRefParam;
  }
  // @@protoc_insertion_point(field_mutable:nba.knapp.CtrlRequest.vdev_ref)
  return params_.vdev_ref_;
}
inline ::nba::knapp::CtrlRequest_VdevRefParam* CtrlRequest::release_vdev_ref() {
  // @@protoc_insertion_point(field_release:nba.knapp.CtrlRequest.vdev_ref)
  if (has_vdev_ref()) {
    clear_has_params();
    ::nba::knapp::CtrlRequest_VdevRefParam* temp = params_.vdev_ref_;
    params_.vdev_ref_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CtrlRequest::set_allocated_vdev_ref(::nba::knapp::CtrlRequest_VdevRefParam* vdev_ref) {
  clear_params();
  if (vdev_ref) {
    set_has_vdev_ref();
    params_.vdev_ref_ = vdev_ref;
  }
  // @@protoc_insertion_point(field_set_allocated:nba.knapp.CtrlRequest.vdev_ref)
}

inline bool CtrlRequest::has_params() const {
  return params_case() != PARAMS_NOT_SET;
}
inline void CtrlRequest::clear_has_params() {
  _oneof_case_[0] = PARAMS_NOT_SET;
}
inline CtrlRequest::ParamsCase CtrlRequest::params_case() const {
  return CtrlRequest::ParamsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CtrlResponse_TextResponse

// optional string msg = 1;
inline void CtrlResponse_TextResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CtrlResponse_TextResponse::msg() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlResponse.TextResponse.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlResponse_TextResponse::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlResponse.TextResponse.msg)
}
inline void CtrlResponse_TextResponse::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nba.knapp.CtrlResponse.TextResponse.msg)
}
inline void CtrlResponse_TextResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nba.knapp.CtrlResponse.TextResponse.msg)
}
inline ::std::string* CtrlResponse_TextResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:nba.knapp.CtrlResponse.TextResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtrlResponse_TextResponse::release_msg() {
  // @@protoc_insertion_point(field_release:nba.knapp.CtrlResponse.TextResponse.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlResponse_TextResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:nba.knapp.CtrlResponse.TextResponse.msg)
}

// -------------------------------------------------------------------

// CtrlResponse_ResourceResponse

// optional uint64 handle = 1;
inline void CtrlResponse_ResourceResponse::clear_handle() {
  handle_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CtrlResponse_ResourceResponse::handle() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlResponse.ResourceResponse.handle)
  return handle_;
}
inline void CtrlResponse_ResourceResponse::set_handle(::google::protobuf::uint64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlResponse.ResourceResponse.handle)
}

// -------------------------------------------------------------------

// CtrlResponse

// optional .nba.knapp.CtrlResponse.Reply reply = 1;
inline void CtrlResponse::clear_reply() {
  reply_ = 0;
}
inline ::nba::knapp::CtrlResponse_Reply CtrlResponse::reply() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlResponse.reply)
  return static_cast< ::nba::knapp::CtrlResponse_Reply >(reply_);
}
inline void CtrlResponse::set_reply(::nba::knapp::CtrlResponse_Reply value) {
  
  reply_ = value;
  // @@protoc_insertion_point(field_set:nba.knapp.CtrlResponse.reply)
}

// optional .nba.knapp.CtrlResponse.TextResponse text = 2;
inline bool CtrlResponse::has_text() const {
  return data_case() == kText;
}
inline void CtrlResponse::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void CtrlResponse::clear_text() {
  if (has_text()) {
    delete data_.text_;
    clear_has_data();
  }
}
inline  const ::nba::knapp::CtrlResponse_TextResponse& CtrlResponse::text() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlResponse.text)
  return has_text()
      ? *data_.text_
      : ::nba::knapp::CtrlResponse_TextResponse::default_instance();
}
inline ::nba::knapp::CtrlResponse_TextResponse* CtrlResponse::mutable_text() {
  if (!has_text()) {
    clear_data();
    set_has_text();
    data_.text_ = new ::nba::knapp::CtrlResponse_TextResponse;
  }
  // @@protoc_insertion_point(field_mutable:nba.knapp.CtrlResponse.text)
  return data_.text_;
}
inline ::nba::knapp::CtrlResponse_TextResponse* CtrlResponse::release_text() {
  // @@protoc_insertion_point(field_release:nba.knapp.CtrlResponse.text)
  if (has_text()) {
    clear_has_data();
    ::nba::knapp::CtrlResponse_TextResponse* temp = data_.text_;
    data_.text_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CtrlResponse::set_allocated_text(::nba::knapp::CtrlResponse_TextResponse* text) {
  clear_data();
  if (text) {
    set_has_text();
    data_.text_ = text;
  }
  // @@protoc_insertion_point(field_set_allocated:nba.knapp.CtrlResponse.text)
}

// optional .nba.knapp.CtrlResponse.ResourceResponse resource = 3;
inline bool CtrlResponse::has_resource() const {
  return data_case() == kResource;
}
inline void CtrlResponse::set_has_resource() {
  _oneof_case_[0] = kResource;
}
inline void CtrlResponse::clear_resource() {
  if (has_resource()) {
    delete data_.resource_;
    clear_has_data();
  }
}
inline  const ::nba::knapp::CtrlResponse_ResourceResponse& CtrlResponse::resource() const {
  // @@protoc_insertion_point(field_get:nba.knapp.CtrlResponse.resource)
  return has_resource()
      ? *data_.resource_
      : ::nba::knapp::CtrlResponse_ResourceResponse::default_instance();
}
inline ::nba::knapp::CtrlResponse_ResourceResponse* CtrlResponse::mutable_resource() {
  if (!has_resource()) {
    clear_data();
    set_has_resource();
    data_.resource_ = new ::nba::knapp::CtrlResponse_ResourceResponse;
  }
  // @@protoc_insertion_point(field_mutable:nba.knapp.CtrlResponse.resource)
  return data_.resource_;
}
inline ::nba::knapp::CtrlResponse_ResourceResponse* CtrlResponse::release_resource() {
  // @@protoc_insertion_point(field_release:nba.knapp.CtrlResponse.resource)
  if (has_resource()) {
    clear_has_data();
    ::nba::knapp::CtrlResponse_ResourceResponse* temp = data_.resource_;
    data_.resource_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CtrlResponse::set_allocated_resource(::nba::knapp::CtrlResponse_ResourceResponse* resource) {
  clear_data();
  if (resource) {
    set_has_resource();
    data_.resource_ = resource;
  }
  // @@protoc_insertion_point(field_set_allocated:nba.knapp.CtrlResponse.resource)
}

inline bool CtrlResponse::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void CtrlResponse::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline CtrlResponse::DataCase CtrlResponse::data_case() const {
  return CtrlResponse::DataCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace knapp
}  // namespace nba

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::nba::knapp::CtrlRequest_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nba::knapp::CtrlRequest_Type>() {
  return ::nba::knapp::CtrlRequest_Type_descriptor();
}
template <> struct is_proto_enum< ::nba::knapp::CtrlResponse_Reply> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nba::knapp::CtrlResponse_Reply>() {
  return ::nba::knapp::CtrlResponse_Reply_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ctrl_2eproto__INCLUDED
